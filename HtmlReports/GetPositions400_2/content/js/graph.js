/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1556.0, "minX": 0.0, "maxY": 61714.0, "series": [{"data": [[0.0, 1556.0], [0.1, 5077.0], [0.2, 7517.0], [0.3, 9594.0], [0.4, 11272.0], [0.5, 13242.0], [0.6, 14638.0], [0.7, 16492.0], [0.8, 17531.0], [0.9, 19642.0], [1.0, 21608.0], [1.1, 23488.0], [1.2, 25396.0], [1.3, 27372.0], [1.4, 29972.0], [1.5, 32598.0], [1.6, 34953.0], [1.7, 37383.0], [1.8, 40235.0], [1.9, 42338.0], [2.0, 43543.0], [2.1, 45559.0], [2.2, 47112.0], [2.3, 48677.0], [2.4, 50423.0], [2.5, 51840.0], [2.6, 53280.0], [2.7, 55160.0], [2.8, 56901.0], [2.9, 58735.0], [3.0, 60024.0], [3.1, 60030.0], [3.2, 60033.0], [3.3, 60036.0], [3.4, 60037.0], [3.5, 60038.0], [3.6, 60039.0], [3.7, 60039.0], [3.8, 60039.0], [3.9, 60040.0], [4.0, 60040.0], [4.1, 60040.0], [4.2, 60040.0], [4.3, 60041.0], [4.4, 60041.0], [4.5, 60041.0], [4.6, 60041.0], [4.7, 60041.0], [4.8, 60042.0], [4.9, 60042.0], [5.0, 60042.0], [5.1, 60042.0], [5.2, 60042.0], [5.3, 60043.0], [5.4, 60043.0], [5.5, 60043.0], [5.6, 60043.0], [5.7, 60043.0], [5.8, 60044.0], [5.9, 60044.0], [6.0, 60044.0], [6.1, 60044.0], [6.2, 60044.0], [6.3, 60044.0], [6.4, 60045.0], [6.5, 60045.0], [6.6, 60045.0], [6.7, 60045.0], [6.8, 60045.0], [6.9, 60045.0], [7.0, 60046.0], [7.1, 60046.0], [7.2, 60046.0], [7.3, 60046.0], [7.4, 60046.0], [7.5, 60046.0], [7.6, 60046.0], [7.7, 60046.0], [7.8, 60047.0], [7.9, 60047.0], [8.0, 60047.0], [8.1, 60047.0], [8.2, 60047.0], [8.3, 60047.0], [8.4, 60047.0], [8.5, 60047.0], [8.6, 60047.0], [8.7, 60047.0], [8.8, 60047.0], [8.9, 60048.0], [9.0, 60048.0], [9.1, 60048.0], [9.2, 60048.0], [9.3, 60048.0], [9.4, 60048.0], [9.5, 60048.0], [9.6, 60048.0], [9.7, 60048.0], [9.8, 60048.0], [9.9, 60048.0], [10.0, 60048.0], [10.1, 60048.0], [10.2, 60048.0], [10.3, 60048.0], [10.4, 60048.0], [10.5, 60048.0], [10.6, 60049.0], [10.7, 60049.0], [10.8, 60049.0], [10.9, 60049.0], [11.0, 60049.0], [11.1, 60049.0], [11.2, 60049.0], [11.3, 60049.0], [11.4, 60049.0], [11.5, 60049.0], [11.6, 60049.0], [11.7, 60049.0], [11.8, 60049.0], [11.9, 60049.0], [12.0, 60049.0], [12.1, 60049.0], [12.2, 60049.0], [12.3, 60049.0], [12.4, 60049.0], [12.5, 60049.0], [12.6, 60049.0], [12.7, 60049.0], [12.8, 60049.0], [12.9, 60049.0], [13.0, 60049.0], [13.1, 60049.0], [13.2, 60049.0], [13.3, 60050.0], [13.4, 60050.0], [13.5, 60050.0], [13.6, 60050.0], [13.7, 60050.0], [13.8, 60050.0], [13.9, 60050.0], [14.0, 60050.0], [14.1, 60050.0], [14.2, 60050.0], [14.3, 60050.0], [14.4, 60050.0], [14.5, 60050.0], [14.6, 60050.0], [14.7, 60050.0], [14.8, 60050.0], [14.9, 60050.0], [15.0, 60050.0], [15.1, 60050.0], [15.2, 60050.0], [15.3, 60050.0], [15.4, 60050.0], [15.5, 60050.0], [15.6, 60050.0], [15.7, 60050.0], [15.8, 60050.0], [15.9, 60050.0], [16.0, 60050.0], [16.1, 60050.0], [16.2, 60050.0], [16.3, 60050.0], [16.4, 60050.0], [16.5, 60051.0], [16.6, 60051.0], [16.7, 60051.0], [16.8, 60051.0], [16.9, 60051.0], [17.0, 60051.0], [17.1, 60051.0], [17.2, 60051.0], [17.3, 60051.0], [17.4, 60051.0], [17.5, 60051.0], [17.6, 60051.0], [17.7, 60051.0], [17.8, 60051.0], [17.9, 60051.0], [18.0, 60051.0], [18.1, 60051.0], [18.2, 60051.0], [18.3, 60051.0], [18.4, 60051.0], [18.5, 60051.0], [18.6, 60051.0], [18.7, 60051.0], [18.8, 60051.0], [18.9, 60051.0], [19.0, 60051.0], [19.1, 60051.0], [19.2, 60051.0], [19.3, 60051.0], [19.4, 60051.0], [19.5, 60051.0], [19.6, 60051.0], [19.7, 60052.0], [19.8, 60052.0], [19.9, 60052.0], [20.0, 60052.0], [20.1, 60052.0], [20.2, 60052.0], [20.3, 60052.0], [20.4, 60052.0], [20.5, 60052.0], [20.6, 60052.0], [20.7, 60052.0], [20.8, 60052.0], [20.9, 60052.0], [21.0, 60052.0], [21.1, 60052.0], [21.2, 60052.0], [21.3, 60052.0], [21.4, 60052.0], [21.5, 60052.0], [21.6, 60052.0], [21.7, 60052.0], [21.8, 60052.0], [21.9, 60052.0], [22.0, 60052.0], [22.1, 60052.0], [22.2, 60052.0], [22.3, 60052.0], [22.4, 60052.0], [22.5, 60053.0], [22.6, 60053.0], [22.7, 60053.0], [22.8, 60053.0], [22.9, 60053.0], [23.0, 60053.0], [23.1, 60053.0], [23.2, 60053.0], [23.3, 60053.0], [23.4, 60053.0], [23.5, 60053.0], [23.6, 60053.0], [23.7, 60053.0], [23.8, 60053.0], [23.9, 60053.0], [24.0, 60053.0], [24.1, 60053.0], [24.2, 60053.0], [24.3, 60053.0], [24.4, 60053.0], [24.5, 60053.0], [24.6, 60053.0], [24.7, 60053.0], [24.8, 60053.0], [24.9, 60053.0], [25.0, 60053.0], [25.1, 60053.0], [25.2, 60053.0], [25.3, 60053.0], [25.4, 60054.0], [25.5, 60054.0], [25.6, 60054.0], [25.7, 60054.0], [25.8, 60054.0], [25.9, 60054.0], [26.0, 60054.0], [26.1, 60054.0], [26.2, 60054.0], [26.3, 60054.0], [26.4, 60054.0], [26.5, 60054.0], [26.6, 60054.0], [26.7, 60054.0], [26.8, 60054.0], [26.9, 60054.0], [27.0, 60054.0], [27.1, 60054.0], [27.2, 60054.0], [27.3, 60054.0], [27.4, 60054.0], [27.5, 60054.0], [27.6, 60054.0], [27.7, 60054.0], [27.8, 60054.0], [27.9, 60054.0], [28.0, 60054.0], [28.1, 60055.0], [28.2, 60055.0], [28.3, 60055.0], [28.4, 60055.0], [28.5, 60055.0], [28.6, 60055.0], [28.7, 60055.0], [28.8, 60055.0], [28.9, 60055.0], [29.0, 60055.0], [29.1, 60055.0], [29.2, 60055.0], [29.3, 60055.0], [29.4, 60055.0], [29.5, 60055.0], [29.6, 60055.0], [29.7, 60055.0], [29.8, 60055.0], [29.9, 60055.0], [30.0, 60055.0], [30.1, 60055.0], [30.2, 60055.0], [30.3, 60055.0], [30.4, 60055.0], [30.5, 60055.0], [30.6, 60055.0], [30.7, 60055.0], [30.8, 60055.0], [30.9, 60055.0], [31.0, 60056.0], [31.1, 60056.0], [31.2, 60056.0], [31.3, 60056.0], [31.4, 60056.0], [31.5, 60056.0], [31.6, 60056.0], [31.7, 60056.0], [31.8, 60056.0], [31.9, 60056.0], [32.0, 60056.0], [32.1, 60056.0], [32.2, 60056.0], [32.3, 60056.0], [32.4, 60056.0], [32.5, 60056.0], [32.6, 60056.0], [32.7, 60056.0], [32.8, 60056.0], [32.9, 60056.0], [33.0, 60056.0], [33.1, 60056.0], [33.2, 60056.0], [33.3, 60056.0], [33.4, 60056.0], [33.5, 60056.0], [33.6, 60056.0], [33.7, 60056.0], [33.8, 60056.0], [33.9, 60056.0], [34.0, 60056.0], [34.1, 60057.0], [34.2, 60057.0], [34.3, 60057.0], [34.4, 60057.0], [34.5, 60057.0], [34.6, 60057.0], [34.7, 60057.0], [34.8, 60057.0], [34.9, 60057.0], [35.0, 60057.0], [35.1, 60057.0], [35.2, 60057.0], [35.3, 60057.0], [35.4, 60057.0], [35.5, 60057.0], [35.6, 60057.0], [35.7, 60057.0], [35.8, 60057.0], [35.9, 60057.0], [36.0, 60057.0], [36.1, 60057.0], [36.2, 60057.0], [36.3, 60057.0], [36.4, 60057.0], [36.5, 60057.0], [36.6, 60057.0], [36.7, 60057.0], [36.8, 60057.0], [36.9, 60057.0], [37.0, 60057.0], [37.1, 60057.0], [37.2, 60057.0], [37.3, 60057.0], [37.4, 60057.0], [37.5, 60057.0], [37.6, 60058.0], [37.7, 60058.0], [37.8, 60058.0], [37.9, 60058.0], [38.0, 60058.0], [38.1, 60058.0], [38.2, 60058.0], [38.3, 60058.0], [38.4, 60058.0], [38.5, 60058.0], [38.6, 60058.0], [38.7, 60058.0], [38.8, 60058.0], [38.9, 60058.0], [39.0, 60058.0], [39.1, 60058.0], [39.2, 60058.0], [39.3, 60058.0], [39.4, 60058.0], [39.5, 60058.0], [39.6, 60058.0], [39.7, 60058.0], [39.8, 60058.0], [39.9, 60058.0], [40.0, 60058.0], [40.1, 60058.0], [40.2, 60058.0], [40.3, 60058.0], [40.4, 60058.0], [40.5, 60058.0], [40.6, 60058.0], [40.7, 60058.0], [40.8, 60058.0], [40.9, 60058.0], [41.0, 60058.0], [41.1, 60058.0], [41.2, 60058.0], [41.3, 60058.0], [41.4, 60058.0], [41.5, 60058.0], [41.6, 60058.0], [41.7, 60058.0], [41.8, 60058.0], [41.9, 60058.0], [42.0, 60058.0], [42.1, 60059.0], [42.2, 60059.0], [42.3, 60059.0], [42.4, 60059.0], [42.5, 60059.0], [42.6, 60059.0], [42.7, 60059.0], [42.8, 60059.0], [42.9, 60059.0], [43.0, 60059.0], [43.1, 60059.0], [43.2, 60059.0], [43.3, 60059.0], [43.4, 60059.0], [43.5, 60059.0], [43.6, 60059.0], [43.7, 60059.0], [43.8, 60059.0], [43.9, 60059.0], [44.0, 60059.0], [44.1, 60059.0], [44.2, 60059.0], [44.3, 60059.0], [44.4, 60059.0], [44.5, 60059.0], [44.6, 60059.0], [44.7, 60059.0], [44.8, 60059.0], [44.9, 60059.0], [45.0, 60059.0], [45.1, 60059.0], [45.2, 60059.0], [45.3, 60059.0], [45.4, 60059.0], [45.5, 60059.0], [45.6, 60059.0], [45.7, 60059.0], [45.8, 60059.0], [45.9, 60059.0], [46.0, 60059.0], [46.1, 60059.0], [46.2, 60059.0], [46.3, 60059.0], [46.4, 60059.0], [46.5, 60059.0], [46.6, 60059.0], [46.7, 60059.0], [46.8, 60059.0], [46.9, 60059.0], [47.0, 60059.0], [47.1, 60059.0], [47.2, 60059.0], [47.3, 60059.0], [47.4, 60059.0], [47.5, 60059.0], [47.6, 60059.0], [47.7, 60059.0], [47.8, 60059.0], [47.9, 60060.0], [48.0, 60060.0], [48.1, 60060.0], [48.2, 60060.0], [48.3, 60060.0], [48.4, 60060.0], [48.5, 60060.0], [48.6, 60060.0], [48.7, 60060.0], [48.8, 60060.0], [48.9, 60060.0], [49.0, 60060.0], [49.1, 60060.0], [49.2, 60060.0], [49.3, 60060.0], [49.4, 60060.0], [49.5, 60060.0], [49.6, 60060.0], [49.7, 60060.0], [49.8, 60060.0], [49.9, 60060.0], [50.0, 60060.0], [50.1, 60060.0], [50.2, 60060.0], [50.3, 60060.0], [50.4, 60060.0], [50.5, 60060.0], [50.6, 60060.0], [50.7, 60060.0], [50.8, 60060.0], [50.9, 60060.0], [51.0, 60060.0], [51.1, 60060.0], [51.2, 60060.0], [51.3, 60060.0], [51.4, 60060.0], [51.5, 60060.0], [51.6, 60060.0], [51.7, 60060.0], [51.8, 60060.0], [51.9, 60060.0], [52.0, 60060.0], [52.1, 60060.0], [52.2, 60060.0], [52.3, 60060.0], [52.4, 60060.0], [52.5, 60060.0], [52.6, 60060.0], [52.7, 60060.0], [52.8, 60060.0], [52.9, 60060.0], [53.0, 60060.0], [53.1, 60060.0], [53.2, 60060.0], [53.3, 60060.0], [53.4, 60060.0], [53.5, 60060.0], [53.6, 60060.0], [53.7, 60060.0], [53.8, 60060.0], [53.9, 60060.0], [54.0, 60061.0], [54.1, 60061.0], [54.2, 60061.0], [54.3, 60061.0], [54.4, 60061.0], [54.5, 60061.0], [54.6, 60061.0], [54.7, 60061.0], [54.8, 60061.0], [54.9, 60061.0], [55.0, 60061.0], [55.1, 60061.0], [55.2, 60061.0], [55.3, 60061.0], [55.4, 60061.0], [55.5, 60061.0], [55.6, 60061.0], [55.7, 60061.0], [55.8, 60061.0], [55.9, 60061.0], [56.0, 60061.0], [56.1, 60061.0], [56.2, 60061.0], [56.3, 60061.0], [56.4, 60061.0], [56.5, 60061.0], [56.6, 60061.0], [56.7, 60061.0], [56.8, 60061.0], [56.9, 60061.0], [57.0, 60061.0], [57.1, 60061.0], [57.2, 60061.0], [57.3, 60061.0], [57.4, 60061.0], [57.5, 60061.0], [57.6, 60061.0], [57.7, 60061.0], [57.8, 60061.0], [57.9, 60061.0], [58.0, 60061.0], [58.1, 60061.0], [58.2, 60061.0], [58.3, 60061.0], [58.4, 60061.0], [58.5, 60061.0], [58.6, 60061.0], [58.7, 60061.0], [58.8, 60062.0], [58.9, 60062.0], [59.0, 60062.0], [59.1, 60062.0], [59.2, 60062.0], [59.3, 60062.0], [59.4, 60062.0], [59.5, 60062.0], [59.6, 60062.0], [59.7, 60062.0], [59.8, 60062.0], [59.9, 60062.0], [60.0, 60062.0], [60.1, 60062.0], [60.2, 60062.0], [60.3, 60062.0], [60.4, 60062.0], [60.5, 60062.0], [60.6, 60062.0], [60.7, 60062.0], [60.8, 60062.0], [60.9, 60062.0], [61.0, 60062.0], [61.1, 60062.0], [61.2, 60062.0], [61.3, 60062.0], [61.4, 60062.0], [61.5, 60062.0], [61.6, 60062.0], [61.7, 60062.0], [61.8, 60062.0], [61.9, 60063.0], [62.0, 60063.0], [62.1, 60063.0], [62.2, 60063.0], [62.3, 60063.0], [62.4, 60063.0], [62.5, 60063.0], [62.6, 60063.0], [62.7, 60063.0], [62.8, 60063.0], [62.9, 60063.0], [63.0, 60063.0], [63.1, 60063.0], [63.2, 60063.0], [63.3, 60063.0], [63.4, 60063.0], [63.5, 60063.0], [63.6, 60063.0], [63.7, 60063.0], [63.8, 60063.0], [63.9, 60063.0], [64.0, 60064.0], [64.1, 60064.0], [64.2, 60064.0], [64.3, 60064.0], [64.4, 60064.0], [64.5, 60064.0], [64.6, 60064.0], [64.7, 60064.0], [64.8, 60064.0], [64.9, 60064.0], [65.0, 60064.0], [65.1, 60064.0], [65.2, 60064.0], [65.3, 60064.0], [65.4, 60064.0], [65.5, 60064.0], [65.6, 60064.0], [65.7, 60065.0], [65.8, 60065.0], [65.9, 60065.0], [66.0, 60065.0], [66.1, 60065.0], [66.2, 60065.0], [66.3, 60065.0], [66.4, 60065.0], [66.5, 60065.0], [66.6, 60065.0], [66.7, 60065.0], [66.8, 60065.0], [66.9, 60065.0], [67.0, 60065.0], [67.1, 60066.0], [67.2, 60066.0], [67.3, 60066.0], [67.4, 60066.0], [67.5, 60066.0], [67.6, 60066.0], [67.7, 60066.0], [67.8, 60066.0], [67.9, 60066.0], [68.0, 60066.0], [68.1, 60067.0], [68.2, 60067.0], [68.3, 60067.0], [68.4, 60067.0], [68.5, 60067.0], [68.6, 60067.0], [68.7, 60067.0], [68.8, 60067.0], [68.9, 60067.0], [69.0, 60067.0], [69.1, 60068.0], [69.2, 60068.0], [69.3, 60068.0], [69.4, 60068.0], [69.5, 60068.0], [69.6, 60068.0], [69.7, 60068.0], [69.8, 60068.0], [69.9, 60068.0], [70.0, 60068.0], [70.1, 60068.0], [70.2, 60069.0], [70.3, 60069.0], [70.4, 60069.0], [70.5, 60069.0], [70.6, 60069.0], [70.7, 60069.0], [70.8, 60069.0], [70.9, 60069.0], [71.0, 60069.0], [71.1, 60069.0], [71.2, 60069.0], [71.3, 60070.0], [71.4, 60070.0], [71.5, 60070.0], [71.6, 60070.0], [71.7, 60070.0], [71.8, 60070.0], [71.9, 60070.0], [72.0, 60070.0], [72.1, 60070.0], [72.2, 60070.0], [72.3, 60070.0], [72.4, 60071.0], [72.5, 60071.0], [72.6, 60071.0], [72.7, 60071.0], [72.8, 60071.0], [72.9, 60071.0], [73.0, 60071.0], [73.1, 60071.0], [73.2, 60072.0], [73.3, 60072.0], [73.4, 60072.0], [73.5, 60072.0], [73.6, 60072.0], [73.7, 60072.0], [73.8, 60073.0], [73.9, 60073.0], [74.0, 60073.0], [74.1, 60073.0], [74.2, 60074.0], [74.3, 60074.0], [74.4, 60074.0], [74.5, 60075.0], [74.6, 60075.0], [74.7, 60075.0], [74.8, 60076.0], [74.9, 60076.0], [75.0, 60076.0], [75.1, 60077.0], [75.2, 60078.0], [75.3, 60078.0], [75.4, 60079.0], [75.5, 60079.0], [75.6, 60080.0], [75.7, 60080.0], [75.8, 60081.0], [75.9, 60082.0], [76.0, 60083.0], [76.1, 60085.0], [76.2, 60087.0], [76.3, 60089.0], [76.4, 60092.0], [76.5, 60098.0], [76.6, 60112.0], [76.7, 60295.0], [76.8, 61052.0], [76.9, 61056.0], [77.0, 61058.0], [77.1, 61059.0], [77.2, 61060.0], [77.3, 61060.0], [77.4, 61061.0], [77.5, 61062.0], [77.6, 61062.0], [77.7, 61063.0], [77.8, 61064.0], [77.9, 61064.0], [78.0, 61066.0], [78.1, 61066.0], [78.2, 61067.0], [78.3, 61067.0], [78.4, 61068.0], [78.5, 61068.0], [78.6, 61069.0], [78.7, 61069.0], [78.8, 61069.0], [78.9, 61069.0], [79.0, 61070.0], [79.1, 61070.0], [79.2, 61070.0], [79.3, 61070.0], [79.4, 61071.0], [79.5, 61071.0], [79.6, 61071.0], [79.7, 61072.0], [79.8, 61072.0], [79.9, 61073.0], [80.0, 61073.0], [80.1, 61074.0], [80.2, 61075.0], [80.3, 61075.0], [80.4, 61076.0], [80.5, 61077.0], [80.6, 61077.0], [80.7, 61078.0], [80.8, 61078.0], [80.9, 61079.0], [81.0, 61079.0], [81.1, 61080.0], [81.2, 61080.0], [81.3, 61080.0], [81.4, 61081.0], [81.5, 61081.0], [81.6, 61081.0], [81.7, 61082.0], [81.8, 61082.0], [81.9, 61082.0], [82.0, 61083.0], [82.1, 61084.0], [82.2, 61085.0], [82.3, 61086.0], [82.4, 61086.0], [82.5, 61087.0], [82.6, 61088.0], [82.7, 61088.0], [82.8, 61088.0], [82.9, 61089.0], [83.0, 61089.0], [83.1, 61090.0], [83.2, 61090.0], [83.3, 61090.0], [83.4, 61091.0], [83.5, 61091.0], [83.6, 61091.0], [83.7, 61092.0], [83.8, 61092.0], [83.9, 61093.0], [84.0, 61094.0], [84.1, 61095.0], [84.2, 61096.0], [84.3, 61097.0], [84.4, 61097.0], [84.5, 61098.0], [84.6, 61099.0], [84.7, 61099.0], [84.8, 61099.0], [84.9, 61100.0], [85.0, 61100.0], [85.1, 61100.0], [85.2, 61101.0], [85.3, 61101.0], [85.4, 61102.0], [85.5, 61102.0], [85.6, 61103.0], [85.7, 61104.0], [85.8, 61105.0], [85.9, 61106.0], [86.0, 61106.0], [86.1, 61107.0], [86.2, 61107.0], [86.3, 61108.0], [86.4, 61108.0], [86.5, 61108.0], [86.6, 61109.0], [86.7, 61109.0], [86.8, 61109.0], [86.9, 61109.0], [87.0, 61110.0], [87.1, 61110.0], [87.2, 61110.0], [87.3, 61110.0], [87.4, 61110.0], [87.5, 61111.0], [87.6, 61111.0], [87.7, 61111.0], [87.8, 61111.0], [87.9, 61111.0], [88.0, 61112.0], [88.1, 61112.0], [88.2, 61112.0], [88.3, 61113.0], [88.4, 61113.0], [88.5, 61113.0], [88.6, 61113.0], [88.7, 61114.0], [88.8, 61114.0], [88.9, 61115.0], [89.0, 61115.0], [89.1, 61115.0], [89.2, 61115.0], [89.3, 61116.0], [89.4, 61116.0], [89.5, 61116.0], [89.6, 61117.0], [89.7, 61117.0], [89.8, 61117.0], [89.9, 61118.0], [90.0, 61118.0], [90.1, 61118.0], [90.2, 61118.0], [90.3, 61118.0], [90.4, 61119.0], [90.5, 61119.0], [90.6, 61119.0], [90.7, 61119.0], [90.8, 61119.0], [90.9, 61119.0], [91.0, 61119.0], [91.1, 61120.0], [91.2, 61120.0], [91.3, 61120.0], [91.4, 61120.0], [91.5, 61120.0], [91.6, 61120.0], [91.7, 61120.0], [91.8, 61120.0], [91.9, 61120.0], [92.0, 61121.0], [92.1, 61121.0], [92.2, 61121.0], [92.3, 61121.0], [92.4, 61121.0], [92.5, 61121.0], [92.6, 61121.0], [92.7, 61122.0], [92.8, 61122.0], [92.9, 61122.0], [93.0, 61122.0], [93.1, 61122.0], [93.2, 61123.0], [93.3, 61123.0], [93.4, 61123.0], [93.5, 61124.0], [93.6, 61124.0], [93.7, 61124.0], [93.8, 61124.0], [93.9, 61125.0], [94.0, 61125.0], [94.1, 61126.0], [94.2, 61126.0], [94.3, 61126.0], [94.4, 61127.0], [94.5, 61127.0], [94.6, 61127.0], [94.7, 61127.0], [94.8, 61128.0], [94.9, 61128.0], [95.0, 61128.0], [95.1, 61128.0], [95.2, 61129.0], [95.3, 61129.0], [95.4, 61129.0], [95.5, 61129.0], [95.6, 61129.0], [95.7, 61130.0], [95.8, 61130.0], [95.9, 61130.0], [96.0, 61130.0], [96.1, 61130.0], [96.2, 61130.0], [96.3, 61131.0], [96.4, 61131.0], [96.5, 61131.0], [96.6, 61131.0], [96.7, 61131.0], [96.8, 61132.0], [96.9, 61132.0], [97.0, 61132.0], [97.1, 61133.0], [97.2, 61133.0], [97.3, 61134.0], [97.4, 61134.0], [97.5, 61135.0], [97.6, 61136.0], [97.7, 61136.0], [97.8, 61137.0], [97.9, 61137.0], [98.0, 61138.0], [98.1, 61138.0], [98.2, 61139.0], [98.3, 61139.0], [98.4, 61139.0], [98.5, 61140.0], [98.6, 61140.0], [98.7, 61140.0], [98.8, 61141.0], [98.9, 61141.0], [99.0, 61142.0], [99.1, 61142.0], [99.2, 61143.0], [99.3, 61144.0], [99.4, 61146.0], [99.5, 61148.0], [99.6, 61149.0], [99.7, 61150.0], [99.8, 61152.0], [99.9, 61158.0]], "isOverall": false, "label": "Petición HTTP (SOAP)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1500.0, "maxY": 32492.0, "series": [{"data": [[32900.0, 6.0], [34500.0, 1.0], [33700.0, 1.0], [36900.0, 4.0], [37700.0, 1.0], [40900.0, 1.0], [40100.0, 2.0], [39300.0, 2.0], [42500.0, 5.0], [41700.0, 2.0], [43300.0, 3.0], [44900.0, 1.0], [44100.0, 3.0], [45700.0, 3.0], [46500.0, 3.0], [47300.0, 3.0], [48100.0, 1.0], [49700.0, 2.0], [50500.0, 3.0], [51300.0, 3.0], [52100.0, 4.0], [54500.0, 4.0], [53700.0, 2.0], [55300.0, 4.0], [56100.0, 1.0], [56900.0, 2.0], [57700.0, 2.0], [58500.0, 5.0], [59300.0, 1.0], [60100.0, 80.0], [61700.0, 1.0], [1500.0, 3.0], [1600.0, 1.0], [2200.0, 1.0], [2300.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [3200.0, 2.0], [3400.0, 4.0], [3500.0, 2.0], [3600.0, 2.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 2.0], [4300.0, 1.0], [4500.0, 6.0], [4400.0, 3.0], [4600.0, 4.0], [4700.0, 3.0], [4800.0, 1.0], [4900.0, 3.0], [5000.0, 1.0], [5300.0, 1.0], [5200.0, 2.0], [5400.0, 1.0], [5600.0, 1.0], [5900.0, 1.0], [6100.0, 1.0], [6000.0, 1.0], [6200.0, 1.0], [6500.0, 2.0], [6600.0, 4.0], [6400.0, 2.0], [6700.0, 6.0], [6800.0, 1.0], [6900.0, 3.0], [7000.0, 2.0], [7100.0, 4.0], [7200.0, 3.0], [7400.0, 5.0], [7300.0, 2.0], [7500.0, 3.0], [7600.0, 3.0], [7800.0, 2.0], [8000.0, 2.0], [8100.0, 1.0], [8400.0, 2.0], [8200.0, 3.0], [9000.0, 1.0], [8800.0, 2.0], [9200.0, 4.0], [9600.0, 2.0], [9400.0, 3.0], [10200.0, 2.0], [9800.0, 1.0], [10000.0, 6.0], [10400.0, 3.0], [10600.0, 3.0], [10800.0, 3.0], [11200.0, 3.0], [11000.0, 2.0], [11400.0, 3.0], [11600.0, 2.0], [11800.0, 4.0], [12000.0, 2.0], [12200.0, 1.0], [12600.0, 4.0], [13200.0, 5.0], [12800.0, 3.0], [13000.0, 1.0], [13800.0, 3.0], [13400.0, 1.0], [13600.0, 3.0], [14000.0, 6.0], [14200.0, 2.0], [14400.0, 6.0], [14600.0, 4.0], [14800.0, 2.0], [15000.0, 2.0], [15200.0, 1.0], [15800.0, 2.0], [15400.0, 3.0], [15600.0, 3.0], [16000.0, 2.0], [16400.0, 5.0], [17200.0, 5.0], [16800.0, 7.0], [17600.0, 2.0], [18000.0, 1.0], [18400.0, 1.0], [19200.0, 2.0], [18800.0, 1.0], [20000.0, 5.0], [19600.0, 3.0], [20800.0, 4.0], [21200.0, 3.0], [22000.0, 5.0], [21600.0, 4.0], [23200.0, 1.0], [23600.0, 2.0], [24000.0, 2.0], [24400.0, 1.0], [24800.0, 3.0], [25200.0, 4.0], [26000.0, 5.0], [25600.0, 1.0], [26400.0, 1.0], [26800.0, 1.0], [28400.0, 4.0], [28000.0, 3.0], [28800.0, 3.0], [29200.0, 2.0], [29600.0, 1.0], [30800.0, 2.0], [31600.0, 1.0], [31200.0, 1.0], [32400.0, 5.0], [32000.0, 1.0], [32800.0, 3.0], [33600.0, 4.0], [35200.0, 1.0], [36800.0, 1.0], [38400.0, 1.0], [40000.0, 1.0], [39200.0, 1.0], [40800.0, 2.0], [42400.0, 5.0], [43200.0, 2.0], [44000.0, 1.0], [44800.0, 2.0], [46400.0, 2.0], [47200.0, 4.0], [48800.0, 3.0], [48000.0, 1.0], [50400.0, 1.0], [51200.0, 6.0], [52000.0, 4.0], [52800.0, 2.0], [54400.0, 1.0], [53600.0, 1.0], [55200.0, 3.0], [56800.0, 4.0], [58400.0, 3.0], [59200.0, 1.0], [57600.0, 1.0], [60000.0, 32492.0], [61600.0, 1.0], [33100.0, 5.0], [34700.0, 2.0], [36300.0, 3.0], [35500.0, 2.0], [37100.0, 4.0], [39500.0, 3.0], [40300.0, 8.0], [42700.0, 2.0], [41100.0, 1.0], [41900.0, 1.0], [43500.0, 5.0], [44300.0, 2.0], [45900.0, 5.0], [45100.0, 2.0], [46700.0, 3.0], [47500.0, 4.0], [48300.0, 4.0], [49100.0, 3.0], [49900.0, 3.0], [50700.0, 3.0], [51500.0, 1.0], [52300.0, 4.0], [53100.0, 2.0], [54700.0, 2.0], [53900.0, 1.0], [55500.0, 3.0], [56300.0, 3.0], [57100.0, 5.0], [57900.0, 5.0], [58700.0, 3.0], [59500.0, 1.0], [61100.0, 6678.0], [60300.0, 1.0], [16900.0, 6.0], [16500.0, 4.0], [17700.0, 1.0], [18100.0, 2.0], [18500.0, 3.0], [19300.0, 2.0], [18900.0, 1.0], [19700.0, 4.0], [20900.0, 2.0], [21300.0, 8.0], [20500.0, 2.0], [22100.0, 2.0], [21700.0, 3.0], [22500.0, 3.0], [22900.0, 1.0], [23300.0, 2.0], [24500.0, 1.0], [23700.0, 4.0], [24900.0, 2.0], [25300.0, 3.0], [25700.0, 1.0], [26500.0, 1.0], [26100.0, 1.0], [26900.0, 4.0], [27300.0, 6.0], [28100.0, 2.0], [29300.0, 1.0], [28900.0, 1.0], [30500.0, 4.0], [30100.0, 1.0], [29700.0, 1.0], [31300.0, 2.0], [30900.0, 3.0], [32500.0, 4.0], [32100.0, 3.0], [33000.0, 3.0], [36200.0, 2.0], [37000.0, 5.0], [38600.0, 2.0], [37800.0, 1.0], [39400.0, 4.0], [40200.0, 2.0], [41000.0, 1.0], [41800.0, 2.0], [42600.0, 2.0], [43400.0, 6.0], [45000.0, 2.0], [44200.0, 2.0], [45800.0, 5.0], [46600.0, 3.0], [47400.0, 5.0], [48200.0, 3.0], [49000.0, 3.0], [49800.0, 2.0], [50600.0, 1.0], [51400.0, 6.0], [53000.0, 3.0], [52200.0, 3.0], [53800.0, 5.0], [54600.0, 1.0], [55400.0, 3.0], [57000.0, 5.0], [56200.0, 2.0], [57800.0, 3.0], [59400.0, 3.0], [61000.0, 3600.0], [60200.0, 5.0], [34100.0, 3.0], [34900.0, 4.0], [36500.0, 3.0], [38100.0, 1.0], [37300.0, 3.0], [38900.0, 1.0], [40500.0, 1.0], [39700.0, 1.0], [42100.0, 5.0], [42900.0, 1.0], [44500.0, 2.0], [45300.0, 2.0], [46100.0, 5.0], [46900.0, 1.0], [47700.0, 5.0], [48500.0, 1.0], [49300.0, 3.0], [50900.0, 3.0], [50100.0, 3.0], [51700.0, 2.0], [52500.0, 4.0], [53300.0, 1.0], [54100.0, 5.0], [54900.0, 3.0], [56500.0, 2.0], [55700.0, 1.0], [57300.0, 1.0], [58100.0, 2.0], [59700.0, 4.0], [61300.0, 3.0], [60500.0, 4.0], [8700.0, 4.0], [8300.0, 2.0], [8500.0, 1.0], [9100.0, 5.0], [8900.0, 2.0], [9500.0, 5.0], [9700.0, 2.0], [9300.0, 1.0], [10100.0, 3.0], [9900.0, 2.0], [10700.0, 5.0], [10500.0, 2.0], [10900.0, 3.0], [11100.0, 1.0], [11300.0, 2.0], [11700.0, 7.0], [11500.0, 1.0], [12100.0, 1.0], [11900.0, 1.0], [12500.0, 1.0], [12700.0, 2.0], [12900.0, 3.0], [13100.0, 3.0], [13300.0, 1.0], [13500.0, 6.0], [13700.0, 2.0], [14300.0, 9.0], [14100.0, 1.0], [13900.0, 1.0], [14700.0, 4.0], [15100.0, 1.0], [14900.0, 3.0], [15300.0, 5.0], [15700.0, 2.0], [15500.0, 4.0], [16300.0, 2.0], [15900.0, 2.0], [16600.0, 4.0], [17400.0, 3.0], [17000.0, 4.0], [18200.0, 6.0], [17800.0, 2.0], [19400.0, 1.0], [18600.0, 3.0], [19000.0, 4.0], [20200.0, 1.0], [19800.0, 1.0], [21400.0, 1.0], [21000.0, 1.0], [21800.0, 4.0], [22200.0, 4.0], [22600.0, 3.0], [23000.0, 1.0], [23400.0, 3.0], [23800.0, 2.0], [24200.0, 2.0], [25400.0, 2.0], [24600.0, 2.0], [25000.0, 2.0], [26200.0, 3.0], [26600.0, 2.0], [27400.0, 1.0], [27000.0, 3.0], [28600.0, 4.0], [28200.0, 3.0], [27800.0, 1.0], [29000.0, 2.0], [29400.0, 4.0], [29800.0, 1.0], [31400.0, 1.0], [31800.0, 2.0], [32600.0, 6.0], [32200.0, 3.0], [33200.0, 1.0], [34800.0, 1.0], [34000.0, 3.0], [36400.0, 3.0], [38000.0, 2.0], [38800.0, 1.0], [37200.0, 1.0], [40400.0, 2.0], [39600.0, 2.0], [42800.0, 4.0], [42000.0, 2.0], [41200.0, 2.0], [44400.0, 1.0], [43600.0, 1.0], [45200.0, 7.0], [46000.0, 2.0], [46800.0, 2.0], [48400.0, 3.0], [47600.0, 1.0], [49200.0, 3.0], [50000.0, 2.0], [50800.0, 2.0], [51600.0, 2.0], [53200.0, 3.0], [52400.0, 3.0], [54000.0, 6.0], [54800.0, 2.0], [56400.0, 2.0], [55600.0, 3.0], [57200.0, 1.0], [58000.0, 2.0], [58800.0, 3.0], [59600.0, 4.0], [60400.0, 1.0], [61200.0, 4.0], [35100.0, 3.0], [36700.0, 3.0], [37500.0, 3.0], [38300.0, 1.0], [39900.0, 2.0], [39100.0, 2.0], [42300.0, 7.0], [41500.0, 3.0], [43100.0, 2.0], [44700.0, 2.0], [45500.0, 4.0], [46300.0, 3.0], [47100.0, 5.0], [48700.0, 5.0], [47900.0, 1.0], [49500.0, 3.0], [51100.0, 5.0], [50300.0, 1.0], [51900.0, 3.0], [52700.0, 4.0], [53500.0, 1.0], [55100.0, 6.0], [54300.0, 1.0], [56700.0, 4.0], [55900.0, 2.0], [59100.0, 5.0], [57500.0, 2.0], [58300.0, 1.0], [59900.0, 6.0], [61500.0, 1.0], [16700.0, 2.0], [17100.0, 5.0], [17500.0, 5.0], [18300.0, 2.0], [18700.0, 3.0], [19100.0, 2.0], [20300.0, 1.0], [19500.0, 1.0], [21100.0, 4.0], [21500.0, 2.0], [20700.0, 3.0], [21900.0, 3.0], [23500.0, 5.0], [23100.0, 3.0], [22700.0, 4.0], [23900.0, 6.0], [24300.0, 1.0], [25500.0, 6.0], [24700.0, 1.0], [25100.0, 1.0], [26300.0, 3.0], [25900.0, 3.0], [27500.0, 1.0], [27100.0, 1.0], [26700.0, 1.0], [28300.0, 2.0], [27900.0, 1.0], [28700.0, 2.0], [29500.0, 2.0], [29900.0, 3.0], [30700.0, 3.0], [30300.0, 3.0], [31900.0, 2.0], [32700.0, 2.0], [32300.0, 1.0], [33400.0, 2.0], [36600.0, 3.0], [35000.0, 2.0], [37400.0, 4.0], [39800.0, 3.0], [40600.0, 1.0], [39000.0, 1.0], [43000.0, 5.0], [42200.0, 4.0], [41400.0, 2.0], [44600.0, 5.0], [43800.0, 1.0], [45400.0, 2.0], [46200.0, 4.0], [47000.0, 2.0], [48600.0, 4.0], [47800.0, 2.0], [49400.0, 1.0], [50200.0, 5.0], [51000.0, 4.0], [51800.0, 6.0], [52600.0, 2.0], [53400.0, 1.0], [55000.0, 2.0], [54200.0, 3.0], [56600.0, 2.0], [55800.0, 1.0], [57400.0, 3.0], [58200.0, 1.0], [59800.0, 2.0], [61400.0, 1.0]], "isOverall": false, "label": "Petición HTTP (SOAP)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 61700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1061.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 43125.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1061.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 43125.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 37.58510638297873, "minX": 1.68211824E12, "maxY": 400.0, "series": [{"data": [[1.68212478E12, 400.0], [1.68211932E12, 400.0], [1.68212154E12, 400.0], [1.68212376E12, 400.0], [1.6821183E12, 128.83557046979865], [1.68212052E12, 400.0], [1.68212274E12, 400.0], [1.68212496E12, 400.0], [1.68212172E12, 400.0], [1.68211848E12, 400.0], [1.6821195E12, 400.0], [1.68212394E12, 400.0], [1.68212292E12, 400.0], [1.68211968E12, 400.0], [1.6821207E12, 400.0], [1.6821222E12, 400.0], [1.68211896E12, 400.0], [1.68211998E12, 400.0], [1.68212442E12, 400.0], [1.6821234E12, 400.0], [1.68212016E12, 400.0], [1.68212118E12, 400.0], [1.68212238E12, 400.0], [1.68211914E12, 400.0], [1.68212136E12, 400.0], [1.6821246E12, 400.0], [1.68212034E12, 400.0], [1.68212358E12, 400.0], [1.68212256E12, 400.0], [1.68211962E12, 400.0], [1.68212286E12, 400.0], [1.68212184E12, 400.0], [1.68212406E12, 400.0], [1.68212082E12, 400.0], [1.6821186E12, 400.0], [1.68212304E12, 400.0], [1.6821198E12, 400.0], [1.68212202E12, 400.0], [1.68212424E12, 400.0], [1.68211878E12, 400.0], [1.682121E12, 400.0], [1.68212322E12, 400.0], [1.68212028E12, 400.0], [1.6821225E12, 400.0], [1.68212472E12, 400.0], [1.68211824E12, 37.58510638297873], [1.68212148E12, 400.0], [1.6821237E12, 400.0], [1.68211926E12, 400.0], [1.68212268E12, 400.0], [1.68211944E12, 400.0], [1.68212046E12, 400.0], [1.6821249E12, 400.0], [1.68212166E12, 400.0], [1.68212388E12, 400.0], [1.68211842E12, 382.1371428571432], [1.68212064E12, 400.0], [1.68212316E12, 400.0], [1.68211992E12, 400.0], [1.68212094E12, 400.0], [1.68212214E12, 400.0], [1.68212436E12, 400.0], [1.6821189E12, 400.0], [1.68212112E12, 400.0], [1.6821201E12, 400.0], [1.68212334E12, 400.0], [1.68212232E12, 400.0], [1.68212454E12, 400.0], [1.6821213E12, 400.0], [1.68211908E12, 400.0], [1.68212352E12, 400.0], [1.68212382E12, 400.0], [1.68212058E12, 400.0], [1.68211836E12, 262.8374233128836], [1.6821228E12, 400.0], [1.68211956E12, 400.0], [1.68212178E12, 400.0], [1.682124E12, 400.0], [1.68211854E12, 400.0], [1.68212076E12, 400.0], [1.68212298E12, 400.0], [1.68212196E12, 400.0], [1.68211872E12, 400.0], [1.68211974E12, 400.0], [1.68212418E12, 400.0], [1.68211902E12, 400.0], [1.68212124E12, 400.0], [1.68212346E12, 400.0], [1.68212244E12, 400.0], [1.6821192E12, 400.0], [1.68212022E12, 400.0], [1.68212466E12, 400.0], [1.68212364E12, 400.0], [1.6821204E12, 400.0], [1.68212142E12, 400.0], [1.68211938E12, 400.0], [1.68212262E12, 400.0], [1.68212484E12, 400.0], [1.6821216E12, 400.0], [1.6821219E12, 400.0], [1.68212412E12, 400.0], [1.68211866E12, 400.0], [1.68212088E12, 400.0], [1.68211986E12, 400.0], [1.6821231E12, 400.0], [1.68212208E12, 400.0], [1.6821243E12, 400.0], [1.68212106E12, 400.0], [1.68211884E12, 400.0], [1.68212328E12, 400.0], [1.68212004E12, 400.0], [1.68212226E12, 400.0], [1.68212448E12, 400.0]], "isOverall": false, "label": "Grupo de Hilos", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68212496E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1556.0, "minX": 6.0, "maxY": 60112.70421363888, "series": [{"data": [[6.0, 1612.0], [8.0, 1556.0], [11.0, 3424.0], [12.0, 1597.0], [13.0, 4397.0], [16.0, 3376.75], [17.0, 3682.5], [18.0, 4689.0], [19.0, 3208.0], [20.0, 3824.0], [21.0, 4292.333333333333], [22.0, 3446.0], [23.0, 4918.0], [24.0, 3548.5], [26.0, 3483.5], [27.0, 3851.0], [28.0, 3429.0], [29.0, 4046.5], [31.0, 6210.0], [32.0, 6781.0], [33.0, 6285.0], [35.0, 5077.0], [36.0, 6754.0], [37.0, 6256.5], [38.0, 6609.0], [39.0, 5219.0], [40.0, 7115.6], [42.0, 7578.0], [44.0, 6928.0], [45.0, 6665.666666666667], [46.0, 7410.5], [47.0, 8258.75], [48.0, 6720.666666666667], [49.0, 8498.0], [50.0, 6896.0], [51.0, 6109.0], [52.0, 8324.0], [53.0, 6748.0], [54.0, 9103.666666666666], [55.0, 8737.0], [56.0, 8924.666666666666], [59.0, 8039.5], [60.0, 8314.0], [61.0, 9148.666666666666], [62.0, 7431.5], [63.0, 9897.75], [64.0, 9783.0], [66.0, 8061.0], [67.0, 8206.0], [68.0, 10271.666666666666], [69.0, 8437.0], [71.0, 11052.5], [72.0, 11255.0], [73.0, 11554.0], [74.0, 10517.5], [75.0, 9868.0], [76.0, 9893.333333333334], [78.0, 11007.0], [79.0, 12941.5], [80.0, 11748.333333333332], [81.0, 10054.666666666666], [82.0, 9868.0], [83.0, 13285.0], [84.0, 14088.0], [86.0, 14426.0], [87.0, 12048.222222222223], [88.0, 10667.5], [89.0, 13924.0], [92.0, 11778.0], [93.0, 13507.4], [94.0, 13218.142857142857], [95.0, 10977.0], [99.0, 14803.333333333334], [100.0, 11897.6], [101.0, 14186.0], [102.0, 11760.0], [103.0, 15559.25], [104.0, 11964.0], [105.0, 15600.5], [108.0, 14500.333333333334], [109.0, 15005.5], [110.0, 16985.666666666668], [111.0, 17058.0], [112.0, 16851.0], [113.0, 14734.0], [114.0, 14469.333333333334], [115.0, 13420.333333333334], [116.0, 13229.0], [117.0, 15111.666666666666], [118.0, 15615.666666666666], [119.0, 17518.333333333332], [120.0, 16357.0], [121.0, 18701.0], [122.0, 14398.0], [124.0, 19751.0], [125.0, 20129.0], [126.0, 19019.833333333332], [127.0, 16258.5], [128.0, 15478.5], [129.0, 15700.0], [131.0, 16177.0], [132.0, 16606.0], [133.0, 17690.571428571428], [134.0, 18085.5], [135.0, 21587.0], [136.0, 21539.5], [139.0, 19824.5], [140.0, 17117.5], [141.0, 19404.2], [142.0, 22182.5], [143.0, 19687.5], [144.0, 17508.0], [146.0, 18309.8], [147.0, 20333.0], [148.0, 17195.0], [150.0, 21376.0], [151.0, 23506.0], [152.0, 23747.0], [153.0, 19641.0], [154.0, 20909.75], [157.0, 25854.0], [158.0, 21257.0], [159.0, 23814.0], [160.0, 24930.833333333332], [161.0, 22023.0], [162.0, 21459.25], [163.0, 22673.0], [164.0, 25983.25], [165.0, 17836.0], [166.0, 10677.0], [169.0, 23628.5], [171.0, 18609.5], [172.0, 13236.0], [173.0, 19563.5], [174.0, 21867.5], [175.0, 20806.8], [176.0, 20788.0], [177.0, 25975.5], [178.0, 20231.0], [180.0, 16734.666666666668], [183.0, 13377.0], [184.0, 13631.0], [185.0, 28888.0], [186.0, 21817.0], [187.0, 25386.75], [188.0, 28549.6], [189.0, 28390.0], [190.0, 18560.0], [191.0, 24545.666666666668], [193.0, 29972.0], [194.0, 23214.0], [195.0, 16019.0], [196.0, 16008.0], [198.0, 24186.5], [199.0, 16410.0], [200.0, 29689.6], [201.0, 27707.333333333332], [202.0, 25351.5], [203.0, 26748.8], [204.0, 33292.5], [205.0, 25835.0], [206.0, 33681.0], [207.0, 33449.0], [210.0, 19796.5], [211.0, 18322.5], [212.0, 18323.0], [213.0, 36265.5], [214.0, 30373.5], [215.0, 30494.333333333332], [216.0, 30929.666666666668], [217.0, 27957.25], [218.0, 27958.75], [219.0, 28715.5], [220.0, 38051.0], [221.0, 20005.0], [226.0, 25320.2], [227.0, 33593.83333333333], [229.0, 35527.0], [230.0, 36700.2], [231.0, 34352.0], [232.0, 40645.0], [233.0, 24045.42857142857], [234.0, 20763.0], [237.0, 38255.8], [238.0, 22684.0], [239.0, 23012.0], [240.0, 22977.0], [241.0, 36316.333333333336], [242.0, 43109.0], [243.0, 42787.0], [244.0, 34823.8], [245.0, 42168.0], [246.0, 42791.0], [247.0, 23863.0], [248.0, 23933.0], [249.0, 42903.5], [250.0, 36731.666666666664], [251.0, 33096.0], [252.0, 24112.5], [253.0, 42699.666666666664], [254.0, 24599.5], [255.0, 24484.0], [257.0, 34139.0], [256.0, 38848.75], [258.0, 38922.25], [268.0, 40141.75], [269.0, 35284.0], [270.0, 35343.25], [271.0, 32673.0], [261.0, 44567.0], [262.0, 35469.5], [263.0, 35811.5], [264.0, 31631.75], [265.0, 35846.0], [266.0, 45537.0], [267.0, 40964.0], [273.0, 26814.5], [272.0, 26939.0], [275.0, 36304.0], [285.0, 38629.5], [286.0, 30532.0], [287.0, 30790.0], [276.0, 33565.333333333336], [277.0, 36619.0], [278.0, 45899.0], [279.0, 46360.0], [280.0, 46208.5], [281.0, 45935.666666666664], [282.0, 36024.2], [283.0, 46283.0], [289.0, 41032.00000000001], [288.0, 38503.5], [291.0, 32413.833333333336], [300.0, 31652.0], [302.0, 39872.0], [293.0, 42249.71428571428], [294.0, 29408.0], [295.0, 38550.5], [296.0, 47444.0], [297.0, 47495.5], [298.0, 47181.0], [299.0, 43200.5], [305.0, 40717.5], [304.0, 36571.75], [306.0, 39155.6], [307.0, 45236.8], [308.0, 37424.333333333336], [309.0, 37743.666666666664], [310.0, 48691.0], [311.0, 36380.5], [312.0, 43552.333333333336], [317.0, 33828.0], [318.0, 51179.333333333336], [313.0, 49568.0], [321.0, 34911.666666666664], [320.0, 47884.0], [322.0, 42036.0], [323.0, 43556.0], [324.0, 35170.0], [325.0, 42680.25], [326.0, 38704.25], [328.0, 50625.5], [335.0, 45060.857142857145], [333.0, 51926.333333333336], [334.0, 36958.0], [329.0, 41519.4], [330.0, 50632.0], [338.0, 41676.833333333336], [337.0, 50194.0], [339.0, 37383.0], [349.0, 45394.16666666667], [351.0, 46215.5], [340.0, 42953.6], [341.0, 37076.0], [342.0, 44327.333333333336], [343.0, 51814.0], [344.0, 51425.5], [345.0, 48578.4], [354.0, 46485.5], [352.0, 42768.5], [355.0, 46654.75], [364.0, 53820.0], [365.0, 54183.0], [367.0, 49909.666666666664], [356.0, 45325.28571428572], [357.0, 46663.0], [358.0, 52497.0], [359.0, 50483.0], [360.0, 48503.333333333336], [361.0, 43379.0], [363.0, 40219.333333333336], [369.0, 42243.0], [368.0, 54093.5], [370.0, 45395.25], [371.0, 45686.0], [372.0, 51113.42857142857], [373.0, 54328.0], [375.0, 51240.25], [376.0, 45348.0], [382.0, 45052.0], [383.0, 49397.5], [380.0, 42304.5], [381.0, 55588.0], [377.0, 42383.5], [378.0, 48260.25], [385.0, 55526.2], [384.0, 51253.666666666664], [387.0, 53092.33333333333], [396.0, 50277.6], [397.0, 57186.0], [398.0, 44883.0], [399.0, 57314.66666666667], [388.0, 55330.0], [389.0, 44255.0], [391.0, 44756.0], [392.0, 44407.5], [393.0, 44759.0], [394.0, 53077.666666666664], [395.0, 45119.0], [400.0, 60112.70421363888]], "isOverall": false, "label": "Petición HTTP (SOAP)", "isController": false}, {"data": [[396.24675236500076, 59473.96897207212]], "isOverall": false, "label": "Petición HTTP (SOAP)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12.666666666666666, "minX": 1.68211824E12, "maxY": 4170254.85, "series": [{"data": [[1.68212478E12, 4954.3], [1.68211932E12, 5058.166666666667], [1.68212154E12, 5051.933333333333], [1.68212376E12, 5058.666666666667], [1.6821183E12, 3812072.8833333333], [1.68212052E12, 5018.733333333334], [1.68212274E12, 5038.2], [1.68212496E12, 12.666666666666666], [1.68212172E12, 5032.3], [1.68211848E12, 631255.6833333333], [1.6821195E12, 5063.733333333334], [1.68212394E12, 5076.966666666666], [1.68212292E12, 4958.0], [1.68211968E12, 5051.733333333334], [1.6821207E12, 5065.233333333334], [1.6821222E12, 5052.733333333334], [1.68211896E12, 5044.966666666666], [1.68211998E12, 5038.1], [1.68212442E12, 5051.8], [1.6821234E12, 5033.6], [1.68212016E12, 4999.466666666666], [1.68212118E12, 5011.9], [1.68212238E12, 5017.7], [1.68211914E12, 5073.0], [1.68212136E12, 5015.333333333333], [1.6821246E12, 5033.566666666667], [1.68212034E12, 5058.733333333334], [1.68212358E12, 5056.066666666667], [1.68212256E12, 5049.366666666667], [1.68211962E12, 5077.066666666667], [1.68212286E12, 5029.933333333333], [1.68212184E12, 5050.833333333333], [1.68212406E12, 5037.733333333334], [1.68212082E12, 5019.166666666667], [1.6821186E12, 5072.166666666667], [1.68212304E12, 5005.066666666667], [1.6821198E12, 5042.866666666667], [1.68212202E12, 5024.666666666667], [1.68212424E12, 5044.5], [1.68211878E12, 5072.1], [1.682121E12, 5045.333333333333], [1.68212322E12, 5043.8], [1.68212028E12, 5045.6], [1.6821225E12, 5072.433333333333], [1.68212472E12, 5000.5], [1.68211824E12, 1202457.4833333334], [1.68212148E12, 5064.266666666666], [1.6821237E12, 5025.666666666667], [1.68211926E12, 5072.233333333334], [1.68212268E12, 5034.033333333334], [1.68211944E12, 5057.666666666667], [1.68212046E12, 5026.2], [1.6821249E12, 5038.3], [1.68212166E12, 5039.0], [1.68212388E12, 5070.566666666667], [1.68211842E12, 3761581.55], [1.68212064E12, 5050.166666666667], [1.68212316E12, 5045.6], [1.68211992E12, 5067.6], [1.68212094E12, 5057.5], [1.68212214E12, 5062.8], [1.68212436E12, 5033.866666666667], [1.6821189E12, 5058.5], [1.68212112E12, 5057.7], [1.6821201E12, 5064.666666666667], [1.68212334E12, 5000.5], [1.68212232E12, 5011.366666666667], [1.68212454E12, 5058.3], [1.6821213E12, 5068.233333333334], [1.68211908E12, 5059.533333333334], [1.68212352E12, 5057.9], [1.68212382E12, 5066.266666666666], [1.68212058E12, 5055.933333333333], [1.68211836E12, 4170254.85], [1.6821228E12, 4993.4], [1.68211956E12, 5077.533333333334], [1.68212178E12, 5051.366666666667], [1.682124E12, 5048.333333333333], [1.68211854E12, 5058.866666666667], [1.68212076E12, 5053.833333333333], [1.68212298E12, 5052.666666666667], [1.68212196E12, 5065.8], [1.68211872E12, 5073.1], [1.68211974E12, 5089.3], [1.68212418E12, 5049.333333333333], [1.68211902E12, 5075.0], [1.68212124E12, 5064.033333333334], [1.68212346E12, 5059.633333333333], [1.68212244E12, 5055.9], [1.6821192E12, 5072.833333333333], [1.68212022E12, 5037.2], [1.68212466E12, 5060.266666666666], [1.68212364E12, 5020.2], [1.6821204E12, 5033.066666666667], [1.68212142E12, 5062.3], [1.68211938E12, 5074.1], [1.68212262E12, 5060.7], [1.68212484E12, 5026.633333333333], [1.6821216E12, 5045.0], [1.6821219E12, 5010.433333333333], [1.68212412E12, 5032.5], [1.68211866E12, 5070.133333333333], [1.68212088E12, 5049.733333333334], [1.68211986E12, 5055.433333333333], [1.6821231E12, 5071.2], [1.68212208E12, 5049.866666666667], [1.6821243E12, 4981.266666666666], [1.68212106E12, 5072.3], [1.68211884E12, 5072.066666666667], [1.68212328E12, 4999.066666666667], [1.68212004E12, 5044.266666666666], [1.68212226E12, 5023.066666666667], [1.68212448E12, 5035.333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68212478E12, 5154.8], [1.68211932E12, 5246.85], [1.68212154E12, 5260.0], [1.68212376E12, 5260.0], [1.6821183E12, 3918.7], [1.68212052E12, 5233.7], [1.68212274E12, 5246.85], [1.68212496E12, 13.15], [1.68212172E12, 5220.55], [1.68211848E12, 5246.85], [1.6821195E12, 5260.0], [1.68212394E12, 5286.3], [1.68212292E12, 5194.25], [1.68211968E12, 5260.0], [1.6821207E12, 5273.15], [1.6821222E12, 5246.85], [1.68211896E12, 5233.7], [1.68211998E12, 5260.0], [1.68212442E12, 5246.85], [1.6821234E12, 5233.7], [1.68212016E12, 5220.55], [1.68212118E12, 5233.7], [1.68212238E12, 5260.0], [1.68211914E12, 5260.0], [1.68212136E12, 5207.4], [1.6821246E12, 5220.55], [1.68212034E12, 5260.0], [1.68212358E12, 5273.15], [1.68212256E12, 5273.15], [1.68211962E12, 5273.15], [1.68212286E12, 5246.85], [1.68212184E12, 5273.15], [1.68212406E12, 5246.85], [1.68212082E12, 5220.55], [1.6821186E12, 5260.0], [1.68212304E12, 5220.55], [1.6821198E12, 5273.15], [1.68212202E12, 5246.85], [1.68212424E12, 5260.0], [1.68211878E12, 5260.0], [1.682121E12, 5233.7], [1.68212322E12, 5246.85], [1.68212028E12, 5246.85], [1.6821225E12, 5273.15], [1.68212472E12, 5207.4], [1.68211824E12, 1236.1], [1.68212148E12, 5260.0], [1.6821237E12, 5233.7], [1.68211926E12, 5260.0], [1.68212268E12, 5220.55], [1.68211944E12, 5246.85], [1.68212046E12, 5233.7], [1.6821249E12, 5233.7], [1.68212166E12, 5246.85], [1.68212388E12, 5273.15], [1.68211842E12, 4602.5], [1.68212064E12, 5273.15], [1.68212316E12, 5260.0], [1.68211992E12, 5286.3], [1.68212094E12, 5260.0], [1.68212214E12, 5273.15], [1.68212436E12, 5233.7], [1.6821189E12, 5246.85], [1.68212112E12, 5260.0], [1.6821201E12, 5273.15], [1.68212334E12, 5207.4], [1.68212232E12, 5233.7], [1.68212454E12, 5260.0], [1.6821213E12, 5260.0], [1.68211908E12, 5246.85], [1.68212352E12, 5246.85], [1.68212382E12, 5273.15], [1.68212058E12, 5246.85], [1.68211836E12, 4286.9], [1.6821228E12, 5194.25], [1.68211956E12, 5273.15], [1.68212178E12, 5260.0], [1.682124E12, 5246.85], [1.68211854E12, 5246.85], [1.68212076E12, 5246.85], [1.68212298E12, 5299.45], [1.68212196E12, 5312.6], [1.68211872E12, 5260.0], [1.68211974E12, 5325.75], [1.68212418E12, 5273.15], [1.68211902E12, 5260.0], [1.68212124E12, 5260.0], [1.68212346E12, 5246.85], [1.68212244E12, 5260.0], [1.6821192E12, 5260.0], [1.68212022E12, 5233.7], [1.68212466E12, 5246.85], [1.68212364E12, 5220.55], [1.6821204E12, 5233.7], [1.68212142E12, 5260.0], [1.68211938E12, 5260.0], [1.68212262E12, 5246.85], [1.68212484E12, 5220.55], [1.6821216E12, 5233.7], [1.6821219E12, 5260.0], [1.68212412E12, 5246.85], [1.68211866E12, 5260.0], [1.68212088E12, 5260.0], [1.68211986E12, 5286.3], [1.6821231E12, 5286.3], [1.68212208E12, 5273.15], [1.6821243E12, 5207.4], [1.68212106E12, 5260.0], [1.68211884E12, 5260.0], [1.68212328E12, 5194.25], [1.68212004E12, 5260.0], [1.68212226E12, 5220.55], [1.68212448E12, 5220.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68212496E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6131.393617021275, "minX": 1.68211824E12, "maxY": 60614.29824561403, "series": [{"data": [[1.68212478E12, 60331.07397959178], [1.68211932E12, 60110.145363408534], [1.68212154E12, 60136.277499999975], [1.68212376E12, 60332.93499999999], [1.6821183E12, 17149.08724832214], [1.68212052E12, 60051.658291457294], [1.68212274E12, 60144.66666666669], [1.68212496E12, 60062.0], [1.68212172E12, 60301.23425692699], [1.68211848E12, 59726.61904761903], [1.6821195E12, 60014.13249999999], [1.68212394E12, 60284.604477611945], [1.68212292E12, 59847.72151898736], [1.68211968E12, 59972.93249999999], [1.6821207E12, 59952.59351620948], [1.6821222E12, 60253.751879699244], [1.68211896E12, 60081.16834170855], [1.68211998E12, 59758.38999999996], [1.68212442E12, 60380.91729323309], [1.6821234E12, 60361.2537688442], [1.68212016E12, 59954.51133501261], [1.68212118E12, 59710.93216080402], [1.68212238E12, 59905.920000000006], [1.68211914E12, 60071.334999999985], [1.68212136E12, 60216.46717171719], [1.6821246E12, 60575.36272040301], [1.68212034E12, 60116.88999999997], [1.68212358E12, 60216.802992518715], [1.68212256E12, 60024.31920199502], [1.68211962E12, 59976.67082294265], [1.68212286E12, 60032.57393483708], [1.68212184E12, 60031.39650872817], [1.68212406E12, 60203.864661654115], [1.68212082E12, 60120.226700251864], [1.6821186E12, 60058.44000000001], [1.68212304E12, 60193.261964735495], [1.6821198E12, 59731.094763092246], [1.68212202E12, 59989.917293233084], [1.68212424E12, 60226.75000000001], [1.68211878E12, 60056.19500000003], [1.682121E12, 60272.48743718594], [1.68212322E12, 60145.25313283208], [1.68212028E12, 60048.411027568916], [1.6821225E12, 60295.3117206983], [1.68212472E12, 60227.42929292928], [1.68211824E12, 6131.393617021275], [1.68212148E12, 60279.08250000001], [1.6821237E12, 60331.79899497486], [1.68211926E12, 60079.82250000003], [1.68212268E12, 60431.40302267004], [1.68211944E12, 60104.917293233084], [1.68212046E12, 60075.638190954756], [1.6821249E12, 60518.6783919598], [1.68212166E12, 60073.654135338395], [1.68212388E12, 60258.41895261842], [1.68211842E12, 51506.105714285775], [1.68212064E12, 59872.703241895266], [1.68212316E12, 60143.1675], [1.68211992E12, 59803.965174129364], [1.68212094E12, 60163.25250000003], [1.68212214E12, 59991.743142144616], [1.68212436E12, 60379.20854271356], [1.6821189E12, 60058.7343358396], [1.68212112E12, 60153.4375], [1.6821201E12, 59976.76807980047], [1.68212334E12, 60248.56565656563], [1.68212232E12, 60020.66582914577], [1.68212454E12, 60410.27749999999], [1.6821213E12, 60123.44500000002], [1.68211908E12, 60061.759398496266], [1.68212352E12, 60515.19548872182], [1.68212382E12, 60237.4438902743], [1.68212058E12, 60122.453634085236], [1.68211836E12, 35108.75153374235], [1.6821228E12, 60338.8734177215], [1.68211956E12, 60046.04239401497], [1.68212178E12, 60197.41499999997], [1.682124E12, 60499.656641604015], [1.68211854E12, 60057.278195488776], [1.68212076E12, 60213.27067669175], [1.68212298E12, 59844.615384615376], [1.68212196E12, 59852.141089108896], [1.68211872E12, 60058.54000000004], [1.68211974E12, 59641.39259259261], [1.68212418E12, 59711.037406483796], [1.68211902E12, 60064.24749999996], [1.68212124E12, 60234.74], [1.68212346E12, 60424.88220551381], [1.68212244E12, 60296.90999999999], [1.6821192E12, 60074.16749999998], [1.68212022E12, 60144.24120603019], [1.68212466E12, 60614.29824561403], [1.68212364E12, 60077.39546599498], [1.6821204E12, 59952.97487437184], [1.68212142E12, 60253.51750000001], [1.68211938E12, 60089.51000000001], [1.68212262E12, 60498.2506265664], [1.68212484E12, 60470.70528967257], [1.6821216E12, 60356.29396984925], [1.6821219E12, 59658.65250000002], [1.68212412E12, 60166.160401002504], [1.68211866E12, 60060.08249999999], [1.68212088E12, 60032.09249999996], [1.68211986E12, 59701.46019900501], [1.6821231E12, 60173.73880597014], [1.68212208E12, 60036.389027431425], [1.6821243E12, 59966.297979798], [1.68212106E12, 60299.19500000001], [1.68211884E12, 60051.04749999999], [1.68212328E12, 60285.97721518983], [1.68212004E12, 59995.414999999986], [1.68212226E12, 60393.944584382894], [1.68212448E12, 60551.40302267]], "isOverall": false, "label": "Petición HTTP (SOAP)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68212496E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5843.968085106382, "minX": 1.68211824E12, "maxY": 60614.27819548875, "series": [{"data": [[1.68212478E12, 60331.058673469386], [1.68211932E12, 60110.13283208023], [1.68212154E12, 60136.26], [1.68212376E12, 60332.91750000002], [1.6821183E12, 16836.58389261745], [1.68212052E12, 60051.64824120606], [1.68212274E12, 60144.64912280704], [1.68212496E12, 60062.0], [1.68212172E12, 60301.22418136024], [1.68211848E12, 59696.47619047623], [1.6821195E12, 60014.1125], [1.68212394E12, 60284.58457711444], [1.68212292E12, 59847.66582278482], [1.68211968E12, 59972.9225], [1.6821207E12, 59952.57855361597], [1.6821222E12, 60253.719298245625], [1.68211896E12, 60081.138190954785], [1.68211998E12, 59758.34500000003], [1.68212442E12, 60380.8997493734], [1.6821234E12, 60361.24120603015], [1.68212016E12, 59954.49874055419], [1.68212118E12, 59710.92211055274], [1.68212238E12, 59905.82999999998], [1.68211914E12, 60071.305000000015], [1.68212136E12, 60216.43686868685], [1.6821246E12, 60575.35264483628], [1.68212034E12, 60116.860000000015], [1.68212358E12, 60216.76059850378], [1.68212256E12, 60024.31670822943], [1.68211962E12, 59976.645885286765], [1.68212286E12, 60032.51127819546], [1.68212184E12, 60031.37655860352], [1.68212406E12, 60203.84711779448], [1.68212082E12, 60120.21662468515], [1.6821186E12, 60058.40500000005], [1.68212304E12, 60193.24181360201], [1.6821198E12, 59731.06982543643], [1.68212202E12, 59989.89473684207], [1.68212424E12, 60226.732500000006], [1.68211878E12, 60056.184999999976], [1.682121E12, 60272.47236180903], [1.68212322E12, 60145.23308270681], [1.68212028E12, 60048.37844611528], [1.6821225E12, 60295.30423940145], [1.68212472E12, 60227.401515151534], [1.68211824E12, 5843.968085106382], [1.68212148E12, 60278.97500000003], [1.6821237E12, 60331.78391959797], [1.68211926E12, 60079.80249999999], [1.68212268E12, 60431.38287153652], [1.68211944E12, 60104.88972431078], [1.68212046E12, 60075.60050251254], [1.6821249E12, 60518.63065326635], [1.68212166E12, 60073.64411027573], [1.68212388E12, 60258.386533665835], [1.68211842E12, 51309.982857142866], [1.68212064E12, 59872.6982543641], [1.68212316E12, 60143.13999999997], [1.68211992E12, 59803.92537313432], [1.68212094E12, 60163.225], [1.68212214E12, 59991.73067331669], [1.68212436E12, 60379.18592964825], [1.6821189E12, 60058.711779448575], [1.68212112E12, 60153.43000000002], [1.6821201E12, 59976.7356608479], [1.68212334E12, 60248.547979797986], [1.68212232E12, 60020.64321608042], [1.68212454E12, 60410.25750000001], [1.6821213E12, 60123.417499999974], [1.68211908E12, 60061.74937343359], [1.68212352E12, 60515.17794486212], [1.68212382E12, 60237.42643391521], [1.68212058E12, 60122.4285714286], [1.68211836E12, 34832.66257668711], [1.6821228E12, 60338.83037974684], [1.68211956E12, 60046.03491271823], [1.68212178E12, 60197.39749999999], [1.682124E12, 60499.568922305814], [1.68211854E12, 60057.24812030075], [1.68212076E12, 60213.26315789477], [1.68212298E12, 59844.5980148883], [1.68212196E12, 59852.131188118816], [1.68211872E12, 60058.51249999998], [1.68211974E12, 59641.34074074069], [1.68212418E12, 59711.01995012467], [1.68211902E12, 60064.21750000005], [1.68212124E12, 60234.71249999997], [1.68212346E12, 60424.82957393487], [1.68212244E12, 60296.88500000003], [1.6821192E12, 60074.149999999994], [1.68212022E12, 60144.20603015076], [1.68212466E12, 60614.27819548875], [1.68212364E12, 60077.38539042821], [1.6821204E12, 59952.874371859296], [1.68212142E12, 60253.4825], [1.68211938E12, 60089.49750000001], [1.68212262E12, 60498.233082706756], [1.68212484E12, 60470.65239294712], [1.6821216E12, 60356.27135678392], [1.6821219E12, 59658.642500000016], [1.68212412E12, 60166.15037593985], [1.68211866E12, 60060.05500000001], [1.68212088E12, 60032.082499999975], [1.68211986E12, 59701.427860696494], [1.6821231E12, 60173.711442786094], [1.68212208E12, 60036.379052369106], [1.6821243E12, 59966.28787878789], [1.68212106E12, 60299.15999999998], [1.68211884E12, 60051.0325], [1.68212328E12, 60285.96202531646], [1.68212004E12, 59995.39750000002], [1.68212226E12, 60393.934508816106], [1.68212448E12, 60551.39294710329]], "isOverall": false, "label": "Petición HTTP (SOAP)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68212496E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.100671140939594, "minX": 1.68211824E12, "maxY": 24.568922305764413, "series": [{"data": [[1.68212478E12, 23.61989795918369], [1.68211932E12, 23.496240601503754], [1.68212154E12, 23.382500000000014], [1.68212376E12, 23.64000000000002], [1.6821183E12, 9.100671140939594], [1.68212052E12, 23.143216080402006], [1.68212274E12, 23.403508771929804], [1.68212496E12, 24.0], [1.68212172E12, 23.496221662468507], [1.68211848E12, 15.699248120300751], [1.6821195E12, 23.390000000000025], [1.68212394E12, 23.32587064676617], [1.68212292E12, 23.36962025316456], [1.68211968E12, 23.247500000000006], [1.6821207E12, 23.022443890274314], [1.6821222E12, 23.315789473684223], [1.68211896E12, 23.567839195979907], [1.68211998E12, 23.1675], [1.68212442E12, 23.370927318295745], [1.6821234E12, 23.389447236180903], [1.68212016E12, 23.221662468513856], [1.68212118E12, 23.30904522613067], [1.68212238E12, 22.940000000000005], [1.68211914E12, 23.512499999999996], [1.68212136E12, 23.40151515151516], [1.6821246E12, 23.46851385390429], [1.68212034E12, 23.200000000000014], [1.68212358E12, 23.56359102244388], [1.68212256E12, 23.960099750623435], [1.68211962E12, 23.22942643391522], [1.68212286E12, 23.446115288220557], [1.68212184E12, 23.314214463840365], [1.68212406E12, 23.378446115288213], [1.68212082E12, 23.201511335012604], [1.6821186E12, 23.66499999999998], [1.68212304E12, 23.29471032745593], [1.6821198E12, 23.221945137157128], [1.68212202E12, 23.15288220551377], [1.68212424E12, 23.045000000000016], [1.68211878E12, 23.715000000000025], [1.682121E12, 23.34170854271358], [1.68212322E12, 23.052631578947377], [1.68212028E12, 23.235588972431078], [1.6821225E12, 23.62344139650873], [1.68212472E12, 23.63383838383837], [1.68211824E12, 17.51063829787234], [1.68212148E12, 23.190000000000015], [1.6821237E12, 23.14572864321608], [1.68211926E12, 23.484999999999996], [1.68212268E12, 23.53904282115868], [1.68211944E12, 23.521303258145355], [1.68212046E12, 22.99748743718592], [1.6821249E12, 23.366834170854272], [1.68212166E12, 23.601503759398497], [1.68212388E12, 23.354114713216955], [1.68211842E12, 14.697142857142856], [1.68212064E12, 23.072319201995008], [1.68212316E12, 23.32499999999998], [1.68211992E12, 23.17661691542288], [1.68212094E12, 23.28250000000001], [1.68212214E12, 23.06982543640897], [1.68212436E12, 23.414572864321617], [1.6821189E12, 23.390977443609017], [1.68212112E12, 23.387500000000006], [1.6821201E12, 23.26683291770572], [1.68212334E12, 23.611111111111118], [1.68212232E12, 23.482412060301495], [1.68212454E12, 23.472500000000004], [1.6821213E12, 23.4375], [1.68211908E12, 23.598997493734323], [1.68212352E12, 23.38847117794487], [1.68212382E12, 23.583541147132134], [1.68212058E12, 23.02005012531328], [1.68211836E12, 12.604294478527592], [1.6821228E12, 23.716455696202527], [1.68211956E12, 23.25436408977555], [1.68212178E12, 23.49499999999997], [1.682124E12, 24.568922305764413], [1.68211854E12, 22.085213032581446], [1.68212076E12, 22.867167919799495], [1.68212298E12, 22.937965260545916], [1.68212196E12, 22.918316831683164], [1.68211872E12, 23.84999999999999], [1.68211974E12, 23.162962962962975], [1.68212418E12, 23.149625935162096], [1.68211902E12, 23.6125], [1.68212124E12, 23.31], [1.68212346E12, 23.433583959899728], [1.68212244E12, 23.26750000000001], [1.6821192E12, 23.49249999999996], [1.68212022E12, 23.170854271356767], [1.68212466E12, 23.699248120300748], [1.68212364E12, 23.287153652392956], [1.6821204E12, 23.283919597989968], [1.68212142E12, 23.409999999999997], [1.68211938E12, 23.28], [1.68212262E12, 23.766917293233064], [1.68212484E12, 23.539042821158688], [1.6821216E12, 23.18844221105527], [1.6821219E12, 23.22500000000001], [1.68212412E12, 23.050125313283203], [1.68211866E12, 23.819999999999993], [1.68212088E12, 23.30500000000001], [1.68211986E12, 22.967661691542297], [1.6821231E12, 23.46517412935323], [1.68212208E12, 23.56359102244389], [1.6821243E12, 23.171717171717166], [1.68212106E12, 23.46750000000003], [1.68211884E12, 23.8025], [1.68212328E12, 23.40759493670886], [1.68212004E12, 23.147499999999997], [1.68212226E12, 23.448362720403022], [1.68212448E12, 23.41057934508814]], "isOverall": false, "label": "Petición HTTP (SOAP)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68212496E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1556.0, "minX": 1.68211824E12, "maxY": 60449.0, "series": [{"data": [[1.68211848E12, 60070.0], [1.68211836E12, 51204.0], [1.68211824E12, 10777.0], [1.68211842E12, 60449.0], [1.6821183E12, 30541.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68211848E12, 59938.0], [1.68211836E12, 48235.9], [1.68211824E12, 8956.0], [1.68211842E12, 58322.0], [1.6821183E12, 25724.800000000007]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68211848E12, 60070.0], [1.68211836E12, 51148.73], [1.68211824E12, 10777.0], [1.68211842E12, 60027.3], [1.6821183E12, 29478.979999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68211848E12, 60032.0], [1.68211836E12, 49363.85], [1.68211824E12, 9231.25], [1.68211842E12, 59248.25], [1.6821183E12, 28308.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68211848E12, 54534.0], [1.68211836E12, 15320.0], [1.68211824E12, 1556.0], [1.68211842E12, 36394.0], [1.6821183E12, 7606.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68211848E12, 57229.0], [1.68211836E12, 34962.0], [1.68211824E12, 6687.0], [1.68211842E12, 51484.5], [1.6821183E12, 15802.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68211848E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14394.5, "minX": 1.0, "maxY": 60062.0, "series": [{"data": [[1.0, 18701.0], [2.0, 14394.5], [4.0, 36643.0], [8.0, 42859.0], [9.0, 32966.5], [5.0, 23935.0], [10.0, 25144.0], [11.0, 36456.5], [3.0, 23576.0], [6.0, 44794.5], [12.0, 24767.0], [7.0, 26542.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 60060.0], [2.0, 60061.0], [9.0, 60060.0], [10.0, 60060.0], [11.0, 60060.0], [3.0, 60060.0], [12.0, 60060.0], [13.0, 60060.0], [14.0, 60061.0], [15.0, 60060.0], [4.0, 60060.0], [1.0, 60062.0], [16.0, 60060.0], [17.0, 60061.0], [18.0, 60061.0], [5.0, 60060.0], [6.0, 60060.0], [7.0, 60060.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13752.0, "minX": 1.0, "maxY": 60062.0, "series": [{"data": [[1.0, 18251.0], [2.0, 13752.0], [4.0, 36390.0], [8.0, 42383.0], [9.0, 32592.0], [5.0, 23403.0], [10.0, 24998.0], [11.0, 36165.0], [3.0, 23102.0], [6.0, 44430.5], [12.0, 24441.5], [7.0, 26386.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 60060.0], [2.0, 60061.0], [9.0, 60060.0], [10.0, 60060.0], [11.0, 60060.0], [3.0, 60060.0], [12.0, 60060.0], [13.0, 60060.0], [14.0, 60061.0], [15.0, 60060.0], [4.0, 60060.0], [1.0, 60062.0], [16.0, 60060.0], [17.0, 60061.0], [18.0, 60061.0], [5.0, 60060.0], [6.0, 60060.0], [7.0, 60060.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68211824E12, "maxY": 7.65, "series": [{"data": [[1.68212478E12, 6.533333333333333], [1.68211932E12, 6.65], [1.68212154E12, 6.666666666666667], [1.68212376E12, 6.666666666666667], [1.6821183E12, 7.2], [1.68212052E12, 6.633333333333334], [1.68212274E12, 6.65], [1.68212172E12, 6.616666666666666], [1.68211848E12, 6.65], [1.6821195E12, 6.666666666666667], [1.68212394E12, 6.7], [1.68212292E12, 6.583333333333333], [1.68211968E12, 6.666666666666667], [1.6821207E12, 6.683333333333334], [1.6821222E12, 6.65], [1.68211896E12, 6.633333333333334], [1.68211998E12, 6.666666666666667], [1.68212442E12, 6.65], [1.6821234E12, 6.633333333333334], [1.68212016E12, 6.616666666666666], [1.68212118E12, 6.633333333333334], [1.68212238E12, 6.666666666666667], [1.68211914E12, 6.666666666666667], [1.68212136E12, 6.6], [1.6821246E12, 6.616666666666666], [1.68212034E12, 6.666666666666667], [1.68212358E12, 6.683333333333334], [1.68212256E12, 6.683333333333334], [1.68211962E12, 6.683333333333334], [1.68212286E12, 6.65], [1.68212184E12, 6.683333333333334], [1.68212406E12, 6.65], [1.68212082E12, 6.616666666666666], [1.6821186E12, 6.666666666666667], [1.68212304E12, 6.616666666666666], [1.6821198E12, 6.683333333333334], [1.68212202E12, 6.65], [1.68212424E12, 6.666666666666667], [1.68211878E12, 6.666666666666667], [1.682121E12, 6.633333333333334], [1.68212322E12, 6.65], [1.68212028E12, 6.65], [1.6821225E12, 6.683333333333334], [1.68212472E12, 6.6], [1.68211824E12, 2.6], [1.68212148E12, 6.666666666666667], [1.6821237E12, 6.633333333333334], [1.68211926E12, 6.666666666666667], [1.68212268E12, 6.616666666666666], [1.68211944E12, 6.65], [1.68212046E12, 6.633333333333334], [1.6821249E12, 0.016666666666666666], [1.68212166E12, 6.65], [1.68212388E12, 6.683333333333334], [1.68211842E12, 7.016666666666667], [1.68212064E12, 6.683333333333334], [1.68212316E12, 6.666666666666667], [1.68211992E12, 6.7], [1.68212094E12, 6.666666666666667], [1.68212214E12, 6.683333333333334], [1.68212436E12, 6.633333333333334], [1.6821189E12, 6.65], [1.68212112E12, 6.666666666666667], [1.6821201E12, 6.683333333333334], [1.68212334E12, 6.6], [1.68212232E12, 6.633333333333334], [1.68212454E12, 6.666666666666667], [1.6821213E12, 6.666666666666667], [1.68211908E12, 6.65], [1.68212352E12, 6.65], [1.68212382E12, 6.683333333333334], [1.68212058E12, 6.65], [1.68211836E12, 7.65], [1.6821228E12, 6.583333333333333], [1.68211956E12, 6.683333333333334], [1.68212178E12, 6.666666666666667], [1.682124E12, 6.65], [1.68211854E12, 6.65], [1.68212076E12, 6.65], [1.68212298E12, 6.716666666666667], [1.68212196E12, 6.733333333333333], [1.68211872E12, 6.666666666666667], [1.68211974E12, 6.75], [1.68212418E12, 6.683333333333334], [1.68211902E12, 6.666666666666667], [1.68212124E12, 6.666666666666667], [1.68212346E12, 6.65], [1.68212244E12, 6.666666666666667], [1.6821192E12, 6.666666666666667], [1.68212022E12, 6.633333333333334], [1.68212466E12, 6.65], [1.68212364E12, 6.616666666666666], [1.6821204E12, 6.633333333333334], [1.68212142E12, 6.666666666666667], [1.68211938E12, 6.666666666666667], [1.68212262E12, 6.65], [1.68212484E12, 6.583333333333333], [1.6821216E12, 6.633333333333334], [1.6821219E12, 6.666666666666667], [1.68212412E12, 6.65], [1.68211866E12, 6.666666666666667], [1.68212088E12, 6.666666666666667], [1.68211986E12, 6.7], [1.6821231E12, 6.7], [1.68212208E12, 6.683333333333334], [1.6821243E12, 6.6], [1.68212106E12, 6.666666666666667], [1.68211884E12, 6.666666666666667], [1.68212328E12, 6.583333333333333], [1.68212004E12, 6.666666666666667], [1.68212226E12, 6.616666666666666], [1.68212448E12, 6.616666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6821249E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68211824E12, "maxY": 6.666666666666667, "series": [{"data": [[1.68211848E12, 0.8166666666666667], [1.68211836E12, 5.433333333333334], [1.68211824E12, 1.5666666666666667], [1.68211842E12, 4.9], [1.6821183E12, 4.966666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68212316E12, 0.06666666666666667], [1.68212478E12, 0.03333333333333333], [1.68211992E12, 0.06666666666666667], [1.68212094E12, 0.03333333333333333], [1.68212154E12, 0.05], [1.68212376E12, 0.03333333333333333], [1.68212214E12, 0.05], [1.68212436E12, 0.03333333333333333], [1.68212112E12, 0.03333333333333333], [1.68212052E12, 0.06666666666666667], [1.68212274E12, 0.05], [1.6821201E12, 0.05], [1.68212334E12, 0.05], [1.6821195E12, 0.016666666666666666], [1.68212232E12, 0.08333333333333333], [1.68212394E12, 0.05], [1.68212454E12, 0.03333333333333333], [1.6821213E12, 0.016666666666666666], [1.68212292E12, 0.11666666666666667], [1.68211968E12, 0.05], [1.6821207E12, 0.05], [1.6821222E12, 0.016666666666666666], [1.68212382E12, 0.05], [1.68212058E12, 0.016666666666666666], [1.68211998E12, 0.08333333333333333], [1.68212442E12, 0.016666666666666666], [1.6821228E12, 0.03333333333333333], [1.6821234E12, 0.03333333333333333], [1.68212016E12, 0.08333333333333333], [1.68212118E12, 0.08333333333333333], [1.68211956E12, 0.016666666666666666], [1.68212178E12, 0.05], [1.682124E12, 0.03333333333333333], [1.68212238E12, 0.13333333333333333], [1.68212136E12, 0.016666666666666666], [1.68212076E12, 0.016666666666666666], [1.68212298E12, 0.13333333333333333], [1.68212034E12, 0.03333333333333333], [1.68212196E12, 0.13333333333333333], [1.68212358E12, 0.06666666666666667], [1.68211974E12, 0.11666666666666667], [1.68212418E12, 0.08333333333333333], [1.68212256E12, 0.08333333333333333], [1.68211962E12, 0.016666666666666666], [1.68212286E12, 0.06666666666666667], [1.68212184E12, 0.08333333333333333], [1.68212124E12, 0.016666666666666666], [1.68212244E12, 0.03333333333333333], [1.68212406E12, 0.05], [1.68212082E12, 0.03333333333333333], [1.68212022E12, 0.016666666666666666], [1.68212304E12, 0.06666666666666667], [1.68212364E12, 0.03333333333333333], [1.6821204E12, 0.03333333333333333], [1.68212142E12, 0.016666666666666666], [1.6821198E12, 0.1], [1.68212202E12, 0.08333333333333333], [1.68212424E12, 0.06666666666666667], [1.68212484E12, 0.016666666666666666], [1.68212322E12, 0.03333333333333333], [1.6821219E12, 0.15], [1.68212412E12, 0.06666666666666667], [1.68212088E12, 0.05], [1.68212028E12, 0.03333333333333333], [1.6821225E12, 0.03333333333333333], [1.68212472E12, 0.05], [1.68211986E12, 0.1], [1.68212148E12, 0.016666666666666666], [1.6821231E12, 0.06666666666666667], [1.68212208E12, 0.08333333333333333], [1.6821237E12, 0.05], [1.6821243E12, 0.1], [1.68212046E12, 0.05], [1.68212328E12, 0.016666666666666666], [1.6821249E12, 0.016666666666666666], [1.68212166E12, 0.05], [1.68212388E12, 0.03333333333333333], [1.68212064E12, 0.08333333333333333], [1.68212004E12, 0.06666666666666667], [1.68212226E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68212478E12, 6.5], [1.68211932E12, 6.65], [1.68212154E12, 6.616666666666666], [1.68212376E12, 6.633333333333334], [1.68212052E12, 6.566666666666666], [1.68212274E12, 6.6], [1.68212496E12, 0.016666666666666666], [1.68212172E12, 6.616666666666666], [1.68211848E12, 5.833333333333333], [1.6821195E12, 6.65], [1.68212394E12, 6.65], [1.68212292E12, 6.466666666666667], [1.68211968E12, 6.616666666666666], [1.6821207E12, 6.633333333333334], [1.6821222E12, 6.633333333333334], [1.68211896E12, 6.633333333333334], [1.68211998E12, 6.583333333333333], [1.68212442E12, 6.633333333333334], [1.6821234E12, 6.6], [1.68212016E12, 6.533333333333333], [1.68212118E12, 6.55], [1.68212238E12, 6.533333333333333], [1.68211914E12, 6.666666666666667], [1.68212136E12, 6.583333333333333], [1.6821246E12, 6.616666666666666], [1.68212034E12, 6.633333333333334], [1.68212358E12, 6.616666666666666], [1.68212256E12, 6.6], [1.68211962E12, 6.666666666666667], [1.68212286E12, 6.583333333333333], [1.68212184E12, 6.6], [1.68212406E12, 6.6], [1.68212082E12, 6.583333333333333], [1.6821186E12, 6.666666666666667], [1.68212304E12, 6.55], [1.6821198E12, 6.583333333333333], [1.68212202E12, 6.566666666666666], [1.68212424E12, 6.6], [1.68211878E12, 6.666666666666667], [1.682121E12, 6.633333333333334], [1.68212322E12, 6.616666666666666], [1.68212028E12, 6.616666666666666], [1.6821225E12, 6.65], [1.68212472E12, 6.55], [1.68212148E12, 6.65], [1.6821237E12, 6.583333333333333], [1.68211926E12, 6.666666666666667], [1.68212268E12, 6.616666666666666], [1.68211944E12, 6.65], [1.68212046E12, 6.583333333333333], [1.6821249E12, 6.616666666666666], [1.68212166E12, 6.6], [1.68212388E12, 6.65], [1.68211842E12, 0.9333333333333333], [1.68212064E12, 6.6], [1.68212316E12, 6.6], [1.68211992E12, 6.633333333333334], [1.68212094E12, 6.633333333333334], [1.68212214E12, 6.633333333333334], [1.68212436E12, 6.6], [1.6821189E12, 6.65], [1.68212112E12, 6.633333333333334], [1.6821201E12, 6.633333333333334], [1.68212334E12, 6.55], [1.68212232E12, 6.55], [1.68212454E12, 6.633333333333334], [1.6821213E12, 6.65], [1.68211908E12, 6.65], [1.68212352E12, 6.65], [1.68212382E12, 6.633333333333334], [1.68212058E12, 6.633333333333334], [1.6821228E12, 6.55], [1.68211956E12, 6.666666666666667], [1.68212178E12, 6.616666666666666], [1.682124E12, 6.616666666666666], [1.68211854E12, 6.65], [1.68212076E12, 6.633333333333334], [1.68212298E12, 6.583333333333333], [1.68212196E12, 6.6], [1.68211872E12, 6.666666666666667], [1.68211974E12, 6.633333333333334], [1.68212418E12, 6.6], [1.68211902E12, 6.666666666666667], [1.68212124E12, 6.65], [1.68212346E12, 6.65], [1.68212244E12, 6.633333333333334], [1.6821192E12, 6.666666666666667], [1.68212022E12, 6.616666666666666], [1.68212466E12, 6.65], [1.68212364E12, 6.583333333333333], [1.6821204E12, 6.6], [1.68212142E12, 6.65], [1.68211938E12, 6.666666666666667], [1.68212262E12, 6.65], [1.68212484E12, 6.6], [1.6821216E12, 6.633333333333334], [1.6821219E12, 6.516666666666667], [1.68212412E12, 6.583333333333333], [1.68211866E12, 6.666666666666667], [1.68212088E12, 6.616666666666666], [1.68211986E12, 6.6], [1.6821231E12, 6.633333333333334], [1.68212208E12, 6.6], [1.6821243E12, 6.5], [1.68212106E12, 6.666666666666667], [1.68211884E12, 6.666666666666667], [1.68212328E12, 6.566666666666666], [1.68212004E12, 6.6], [1.68212226E12, 6.6], [1.68212448E12, 6.616666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68212496E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68211824E12, "maxY": 6.75, "series": [{"data": [[1.68212478E12, 6.533333333333333], [1.68211932E12, 6.65], [1.68212154E12, 6.666666666666667], [1.68212376E12, 6.666666666666667], [1.68212052E12, 6.633333333333334], [1.68212274E12, 6.65], [1.68212496E12, 0.016666666666666666], [1.68212172E12, 6.616666666666666], [1.68211848E12, 5.833333333333333], [1.6821195E12, 6.666666666666667], [1.68212394E12, 6.7], [1.68212292E12, 6.583333333333333], [1.68211968E12, 6.666666666666667], [1.6821207E12, 6.683333333333334], [1.6821222E12, 6.65], [1.68211896E12, 6.633333333333334], [1.68211998E12, 6.666666666666667], [1.68212442E12, 6.65], [1.6821234E12, 6.633333333333334], [1.68212016E12, 6.616666666666666], [1.68212118E12, 6.633333333333334], [1.68212238E12, 6.666666666666667], [1.68211914E12, 6.666666666666667], [1.68212136E12, 6.6], [1.6821246E12, 6.616666666666666], [1.68212034E12, 6.666666666666667], [1.68212358E12, 6.683333333333334], [1.68212256E12, 6.683333333333334], [1.68211962E12, 6.683333333333334], [1.68212286E12, 6.65], [1.68212184E12, 6.683333333333334], [1.68212406E12, 6.65], [1.68212082E12, 6.616666666666666], [1.6821186E12, 6.666666666666667], [1.68212304E12, 6.616666666666666], [1.6821198E12, 6.683333333333334], [1.68212202E12, 6.65], [1.68212424E12, 6.666666666666667], [1.68211878E12, 6.666666666666667], [1.682121E12, 6.633333333333334], [1.68212322E12, 6.65], [1.68212028E12, 6.65], [1.6821225E12, 6.683333333333334], [1.68212472E12, 6.6], [1.68212148E12, 6.666666666666667], [1.6821237E12, 6.633333333333334], [1.68211926E12, 6.666666666666667], [1.68212268E12, 6.616666666666666], [1.68211944E12, 6.65], [1.68212046E12, 6.633333333333334], [1.6821249E12, 6.633333333333334], [1.68212166E12, 6.65], [1.68212388E12, 6.683333333333334], [1.68211842E12, 0.9333333333333333], [1.68212064E12, 6.683333333333334], [1.68212316E12, 6.666666666666667], [1.68211992E12, 6.7], [1.68212094E12, 6.666666666666667], [1.68212214E12, 6.683333333333334], [1.68212436E12, 6.633333333333334], [1.6821189E12, 6.65], [1.68212112E12, 6.666666666666667], [1.6821201E12, 6.683333333333334], [1.68212334E12, 6.6], [1.68212232E12, 6.633333333333334], [1.68212454E12, 6.666666666666667], [1.6821213E12, 6.666666666666667], [1.68211908E12, 6.65], [1.68212352E12, 6.65], [1.68212382E12, 6.683333333333334], [1.68212058E12, 6.65], [1.6821228E12, 6.583333333333333], [1.68211956E12, 6.683333333333334], [1.68212178E12, 6.666666666666667], [1.682124E12, 6.65], [1.68211854E12, 6.65], [1.68212076E12, 6.65], [1.68212298E12, 6.716666666666667], [1.68212196E12, 6.733333333333333], [1.68211872E12, 6.666666666666667], [1.68211974E12, 6.75], [1.68212418E12, 6.683333333333334], [1.68211902E12, 6.666666666666667], [1.68212124E12, 6.666666666666667], [1.68212346E12, 6.65], [1.68212244E12, 6.666666666666667], [1.6821192E12, 6.666666666666667], [1.68212022E12, 6.633333333333334], [1.68212466E12, 6.65], [1.68212364E12, 6.616666666666666], [1.6821204E12, 6.633333333333334], [1.68212142E12, 6.666666666666667], [1.68211938E12, 6.666666666666667], [1.68212262E12, 6.65], [1.68212484E12, 6.616666666666666], [1.6821216E12, 6.633333333333334], [1.6821219E12, 6.666666666666667], [1.68212412E12, 6.65], [1.68211866E12, 6.666666666666667], [1.68212088E12, 6.666666666666667], [1.68211986E12, 6.7], [1.6821231E12, 6.7], [1.68212208E12, 6.683333333333334], [1.6821243E12, 6.6], [1.68212106E12, 6.666666666666667], [1.68211884E12, 6.666666666666667], [1.68212328E12, 6.583333333333333], [1.68212004E12, 6.666666666666667], [1.68212226E12, 6.616666666666666], [1.68212448E12, 6.616666666666666]], "isOverall": false, "label": "Petición HTTP (SOAP)-failure", "isController": false}, {"data": [[1.68211848E12, 0.8166666666666667], [1.68211836E12, 5.433333333333334], [1.68211824E12, 1.5666666666666667], [1.68211842E12, 4.9], [1.6821183E12, 4.966666666666667]], "isOverall": false, "label": "Petición HTTP (SOAP)-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68212496E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68211824E12, "maxY": 6.75, "series": [{"data": [[1.68211848E12, 0.8166666666666667], [1.68211836E12, 5.433333333333334], [1.68211824E12, 1.5666666666666667], [1.68211842E12, 4.9], [1.6821183E12, 4.966666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68212478E12, 6.533333333333333], [1.68211932E12, 6.65], [1.68212154E12, 6.666666666666667], [1.68212376E12, 6.666666666666667], [1.68212052E12, 6.633333333333334], [1.68212274E12, 6.65], [1.68212496E12, 0.016666666666666666], [1.68212172E12, 6.616666666666666], [1.68211848E12, 5.833333333333333], [1.6821195E12, 6.666666666666667], [1.68212394E12, 6.7], [1.68212292E12, 6.583333333333333], [1.68211968E12, 6.666666666666667], [1.6821207E12, 6.683333333333334], [1.6821222E12, 6.65], [1.68211896E12, 6.633333333333334], [1.68211998E12, 6.666666666666667], [1.68212442E12, 6.65], [1.6821234E12, 6.633333333333334], [1.68212016E12, 6.616666666666666], [1.68212118E12, 6.633333333333334], [1.68212238E12, 6.666666666666667], [1.68211914E12, 6.666666666666667], [1.68212136E12, 6.6], [1.6821246E12, 6.616666666666666], [1.68212034E12, 6.666666666666667], [1.68212358E12, 6.683333333333334], [1.68212256E12, 6.683333333333334], [1.68211962E12, 6.683333333333334], [1.68212286E12, 6.65], [1.68212184E12, 6.683333333333334], [1.68212406E12, 6.65], [1.68212082E12, 6.616666666666666], [1.6821186E12, 6.666666666666667], [1.68212304E12, 6.616666666666666], [1.6821198E12, 6.683333333333334], [1.68212202E12, 6.65], [1.68212424E12, 6.666666666666667], [1.68211878E12, 6.666666666666667], [1.682121E12, 6.633333333333334], [1.68212322E12, 6.65], [1.68212028E12, 6.65], [1.6821225E12, 6.683333333333334], [1.68212472E12, 6.6], [1.68212148E12, 6.666666666666667], [1.6821237E12, 6.633333333333334], [1.68211926E12, 6.666666666666667], [1.68212268E12, 6.616666666666666], [1.68211944E12, 6.65], [1.68212046E12, 6.633333333333334], [1.6821249E12, 6.633333333333334], [1.68212166E12, 6.65], [1.68212388E12, 6.683333333333334], [1.68211842E12, 0.9333333333333333], [1.68212064E12, 6.683333333333334], [1.68212316E12, 6.666666666666667], [1.68211992E12, 6.7], [1.68212094E12, 6.666666666666667], [1.68212214E12, 6.683333333333334], [1.68212436E12, 6.633333333333334], [1.6821189E12, 6.65], [1.68212112E12, 6.666666666666667], [1.6821201E12, 6.683333333333334], [1.68212334E12, 6.6], [1.68212232E12, 6.633333333333334], [1.68212454E12, 6.666666666666667], [1.6821213E12, 6.666666666666667], [1.68211908E12, 6.65], [1.68212352E12, 6.65], [1.68212382E12, 6.683333333333334], [1.68212058E12, 6.65], [1.6821228E12, 6.583333333333333], [1.68211956E12, 6.683333333333334], [1.68212178E12, 6.666666666666667], [1.682124E12, 6.65], [1.68211854E12, 6.65], [1.68212076E12, 6.65], [1.68212298E12, 6.716666666666667], [1.68212196E12, 6.733333333333333], [1.68211872E12, 6.666666666666667], [1.68211974E12, 6.75], [1.68212418E12, 6.683333333333334], [1.68211902E12, 6.666666666666667], [1.68212124E12, 6.666666666666667], [1.68212346E12, 6.65], [1.68212244E12, 6.666666666666667], [1.6821192E12, 6.666666666666667], [1.68212022E12, 6.633333333333334], [1.68212466E12, 6.65], [1.68212364E12, 6.616666666666666], [1.6821204E12, 6.633333333333334], [1.68212142E12, 6.666666666666667], [1.68211938E12, 6.666666666666667], [1.68212262E12, 6.65], [1.68212484E12, 6.616666666666666], [1.6821216E12, 6.633333333333334], [1.6821219E12, 6.666666666666667], [1.68212412E12, 6.65], [1.68211866E12, 6.666666666666667], [1.68212088E12, 6.666666666666667], [1.68211986E12, 6.7], [1.6821231E12, 6.7], [1.68212208E12, 6.683333333333334], [1.6821243E12, 6.6], [1.68212106E12, 6.666666666666667], [1.68211884E12, 6.666666666666667], [1.68212328E12, 6.583333333333333], [1.68212004E12, 6.666666666666667], [1.68212226E12, 6.616666666666666], [1.68212448E12, 6.616666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68212496E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

